<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics3.Wpf.Chart.v9.1</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Windows.CloneInfo">
            <summary>
            Provides information about the clone operation as well as storing cloned instances
            </summary>
        </member>
        <member name="M:Infragistics.Windows.CloneInfo.TryGetClonedObject(System.Object,System.Object@)">
            <summary>
            Tries to return a clone for the specified object if it has been added to the clone info.
            </summary>
            <param name="source">The object to locate</param>
            <param name="clone">An out parameter that is set to the cloned instance of the source</param>
            <returns>Returns true if the object has been cloned otherwise false</returns>
        </member>
        <member name="M:Infragistics.Windows.CloneInfo.AddClone(System.Object,System.Object)">
            <summary>
            Stores the specified source object and the clone that was created.
            </summary>
            <param name="source">The object that was cloned</param>
            <param name="clone">The clone that represents a copy of the source</param>
        </member>
        <member name="T:Infragistics.Windows.CloneManager">
            <summary>
            Helper class for cloning a dependency object using the MarkupObject infrastructure.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.CloneManager"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.Clone(System.Object)">
            <summary>
            Creates a copy of the specified object.
            </summary>
            <param name="source">The object to be copied.</param>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.Clone(System.Windows.Markup.Primitives.MarkupObject,Infragistics.Windows.CloneInfo)">
            <summary>
            Helper method used to provide the clone of the specified object.
            </summary>
            <param name="mo">The markup object representing the object to be cloned.</param>
            <param name="cloneInfo">Provides information about clone operation.</param>
            <returns>A clone of the specified object</returns>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.CloneItems(System.Object,System.Windows.Markup.Primitives.MarkupProperty,Infragistics.Windows.CloneInfo)">
            <summary>
            Helper method for copying the Items of the specified markup property.
            </summary>
            <param name="clone">The cloned object whose items collection should be updated</param>
            <param name="mp">The property with the items to be cloned</param>
            <param name="cloneInfo">Provides information about the clone operation</param>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.ShouldSkipProperty(System.Windows.Markup.Primitives.MarkupProperty)">
            <summary>
            Used to determine whether the specified property should be skipped
            </summary>
            <param name="property">The property to evaluate</param>
            <returns>Returns false to indicate that the property should be copied.</returns>
        </member>
        <member name="M:Infragistics.Shared.LocalizedCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Returns the localized category name
            </summary>
            <param name="value">Name of the category to retreive</param>
            <returns>The localized string value</returns>
        </member>
        <member name="M:Infragistics.Shared.InternalDynamicResourceString.#ctor(Infragistics.Shared.ResourceCustomizer,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            This constructor is for internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.InternalDynamicResourceString.GetStringFromResource(System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraLicenseAttribute.GetLicensedWithProducts">
            <summary>
            Return the list of products that this control can be licensed with
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.BarChart2D">
            <summary>
            This class creates 2D bar chart. This class is also 
            responsible for 2D bar chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartSeries">
            <summary>
            Base class for all chart type series
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.GetChartAttribute(Infragistics.Windows.Chart.ChartTypeAttribute,Infragistics.Windows.Chart.Series)">
            <summary>
            This method checks weather a chart type from specified series has a chart parameter set to true.
            </summary>
            <param name="parameter">Chart parameter</param>
            <param name="series">Data Series</param>
            <returns>True if chart type from specified series has a chart parameter set to true.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.GetChartAttribute(Infragistics.Windows.Chart.ChartTypeAttribute,Infragistics.Windows.Chart.ChartType,System.Boolean)">
            <summary>
            This method checks weather specified chart type has a chart parameter set to true.
            </summary>
            <param name="parameter">Chart parameter</param>
            <param name="type">Chart type</param>
            <param name="view3D">3D chart type</param>
            <returns>True if specified chart type has a chart parameter set to true.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.Draw(System.Windows.Controls.UIElementCollection)">
            <summary>
            This method draws chart series using Shape UI Elements. Used for 2D charts
            </summary>
            <param name="elements">Element collection used to keep data point shapes</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.Draw(Infragistics.Windows.Chart.GdiGraphics)">
            <summary>
            This method draws chart series using GDI Graphics. Used for fast performance
            </summary>
            <param name="graphics">Gdi Graphics object</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.Draw(Infragistics.Windows.Chart.GdiGraphics,System.Windows.Controls.UIElementCollection)">
            <summary>
            This method draws chart series using GDI Graphics. Used for fast performance
            </summary>
            <param name="graphics">Gdi Graphics object</param>
            <param name="elements">Element collection used to keep data point shapes</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.Draw2D">
            <summary>
            Draw data points using Drawing context or shape 
            UI elements. Also used for hit test functionality.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.Draw(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draw chart type series
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draw chart type series
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.GetStackedNumberOfPoints(Infragistics.Windows.Chart.ChartType,Infragistics.Windows.Chart.SeriesCollection)">
            <summary>
            Find max number of data points for stacked chart types
            </summary>
            <param name="type"></param>
            <param name="seriesList"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.GetStackedNumberOfPoints(Infragistics.Windows.Chart.ChartType,System.Collections.Generic.List{Infragistics.Windows.Chart.Series})">
            <summary>
            Find max number of data points for stacked chart types
            </summary>
            <param name="type"></param>
            <param name="seriesList"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.GetStackedChartTypes">
            <summary>
            Search Chart type enumeration and find all chart types which 
            are stacked. Uses chart type parameters.
            </summary>
            <returns>Array of stacked chart types</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.GetZSeriesPosition(System.Int32,Infragistics.Windows.Chart.SeriesCollection)">
            <summary>
            Calculates Z position for 3D charts. Stacked chart types are grouped together by Z value.
            </summary>
            <param name="index">The series index.</param>
            <param name="seriesList">Array of series.</param>
            <returns>The Z position of the series with specified index.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.CreateChartSeries(Infragistics.Windows.Chart.ChartType,System.Boolean)">
            <summary>
            Create chart series from chart types.
            </summary>
            <param name="type">Chart type</param>
            <param name="view3D">2D or 3D charts</param>
            <returns>New chart series</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.SetHitTest2D(System.Windows.UIElement,System.Int32,System.Int32)">
            <summary>
            Creates hit test info data.
            </summary>
            <param name="shape">A shape which hit test data has to be set</param>
            <param name="seriesIndex">A data series index, parent of the data point</param>
            <param name="pointIndex">Data point index</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.SetShapeparameters(System.Windows.Shapes.Shape,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            Set appearance parameters and event handlers for shapes.
            </summary>
            <param name="shape">A shape which appearance parameters has to be set.</param>
            <param name="point">A data point which is presented with the shape.</param>
            <param name="srsIndx">Series index from chart series group</param>
            <param name="pointIndx">Data point index</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.SetContentEvents(System.Windows.Controls.ContentControl,Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Set event handlers for content.
            </summary>
            <param name="content">A content which appearance parameters has to be set.</param>
            <param name="point">A data point which is presented with the shape.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.CreatePoints(System.Int32,System.Double)">
            <summary>
            Create points for the profile of 3D Column (Top or bottom side). The profile could 
            be: Square, triangle, pentagon, octagon, etc.
            </summary>
            <param name="segments">The number of sides of the profile.</param>
            <param name="radius">The radius of the profile</param>
            <returns>Array of points in 2D space (Profile)</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.CreateLabelBrush(Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Create Label Brush
            </summary>
            <param name="point">Data Point as a source for label.</param>
            <returns>The drawing brush with a label</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.FindMaxRadius(System.Collections.Generic.List{Infragistics.Windows.Chart.Series})">
            <summary>
            Calculates Max radius value from all data points.
            </summary>
            <returns>Maximum radius value</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.CreateStackedData">
            <summary>
            Used to create cumulative values for stacked chart types
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.GetStacked100Value(Infragistics.Windows.Chart.DataPoint,System.Double)">
            <summary>
            This method checks if sum for 100% stacked chart is 0 to avoid division by zero.
            </summary>
            <param name="point">data point which contain the real value</param>
            <param name="sum">The sum of data point values</param>
            <returns>The relative value for 100% stacked chart which cannot be null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.GetStackedValue(System.Int32,System.Int32)">
            <summary>
            Returns cumulative data point value.
            </summary>
            <param name="seriesIndex">Series index</param>
            <param name="pointIndex">Data point index</param>
            <returns>Stacked data point value</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartSeries.FastLine(Infragistics.Windows.Chart.Series,System.Boolean)">
            <summary>
            This algorithm replaces a group of data points with one and increase performance. This 
            algorithm is activated only if there are more than 1000 data points in the series. 
            </summary>
            <param name="series">Series to be optimized</param>
            <param name="scatter">True if the chart types is scatter</param>
            <returns>Data points which are visible are set to true</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartSeries.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartSeries.SeriesList">
            <summary>
            Gets or sets Data Series
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartSeries.Graphics">
            <summary>
            Gets or sets GDI Graphics
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartSeries.Chart">
            <summary>
            Gets or sets Chart reference
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartSeries.PlottingPane3D">
            <summary>
            Gets or sets PlottingPane3D reference
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartSeries.AxisX">
            <summary>
            Gets or sets X axis reference
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartSeries.AxisY">
            <summary>
            Gets or sets Y Axis reference
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartSeries.AxisZ">
            <summary>
            Gets or sets Z Axis reference
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartSeries.Size">
            <summary>
            Gets or sets Plotting pane size
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart2D.GetNumberOfBarSeries(System.Collections.Generic.List{Infragistics.Windows.Chart.Series})">
            <summary>
            Returns the number of bar series
            </summary>
            <param name="seriesList">The list of all series</param>
            <returns>The number of bar series</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart2D.AddShape(System.Windows.Rect,System.Boolean,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes using data templates.
            </summary>
            <param name="rect">Column rectangle which represent a data point.</param>
            <param name="positive">True if a data point value is positive.</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart2D.AddTemplate(System.Windows.Rect,System.Boolean,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes.
            </summary>
            <param name="rect">Column rectangle which represent a data point.</param>
            <param name="positive">True if a data point value is positive.</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.BarChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BarChart2D.IsBar">
            <summary>
            Gets a Boolean value that specifies whether this chart type has Bar type axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BarChart2D.IsClustered">
            <summary>
            Gets a Boolean value that specifies whether this chart 
            type is clustered
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.BarChart3D">
            <summary>
            This class creates 3D bar chart. This class is also 
            responsible for 3D bar chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Primitives3D">
            <summary>
            This class keeps methods which create 3D primitive points, normals, 
            indices and texture points. 3D primitives are basic elements used to 
            create complex object models. For example, pie slice has many 
            3D primitives: Top Slices, Edges, sides, main curves, etc.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Primitives3D.GetPointWidth(System.Double@,Infragistics.Windows.Chart.AxisValue,Infragistics.Windows.Chart.AxisValue,Infragistics.Windows.Chart.Series)">
            <summary>
            Returns point depth for 3D based chart types.
            </summary>
            <param name="depth">The depth of a data point</param>
            <param name="axisX">X axis values</param>
            <param name="axisZ">Y axis values</param>
            <param name="series">The series</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Primitives3D.GetPointWidth(System.Double@,System.Double@,Infragistics.Windows.Chart.AxisValue,Infragistics.Windows.Chart.AxisValue,Infragistics.Windows.Chart.Series)">
            <summary>
            Returns width and depth for Column 3D based chart types.
            </summary>
            <param name="width">The width of a data point</param>
            <param name="depth">The depth of a data point</param>
            <param name="axisX">X axis values</param>
            <param name="axisZ">Y axis values</param>
            <param name="series">The series</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Primitives3D.FindRadialPointZ(System.Double,System.Double,System.Double)">
            <summary>
            Finds a point of the circle which belongs to XY plane and the center is at (0, 0, z). 
            </summary>
            <param name="angle">An angle which is used to find a point from the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="z">Z position</param>
            <returns>The point from the circle.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Primitives3D.FindRadialPointY(System.Double,System.Double,System.Double)">
            <summary>
            Finds a point of the circle which belongs to XZ plane and the center is at (0, y, 0). 
            </summary>
            <param name="angle">An angle which is used to find a point from the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="y">Y position</param>
            <returns>The point from the circle.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Primitives3D.FindRadialPointX(System.Double,System.Double,System.Double)">
            <summary>
            Finds a point of the circle which belongs to YZ plane and the center is at (x, 0, 0). 
            </summary>
            <param name="angle">An angle which is used to find a point from the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="x">X position</param>
            <returns>The point from the circle.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Primitives3D.FindRadialVectorY(System.Double,System.Double,System.Double)">
            <summary>
            Finds a vector from (0, 0, 0) position in 3D space to the circle which belongs to XZ plane and the center is at (0, y, 0). 
            </summary>
            <param name="angle">An angle which is used to find a point from the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="y">Y position</param>
            <returns>The new vector</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Primitives3D.FindRadialVectorX(System.Double,System.Double,System.Double)">
            <summary>
            Finds a vector from (0, 0, 0) position in 3D space to the circle which belongs to YZ plane and the center is at (x, 0, 0). 
            </summary>
            <param name="angle">An angle which is used to find a point from the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="x">X position</param>
            <returns>The new vector</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnBar3DShapes.AddSides(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Windows.Point[],System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates sides for the column/bar with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="shapePoints">The shape points of the column/bar profile.</param>
            <param name="height">The height of the column/bar</param>
            <param name="width">The width of the column/bar</param>
            <param name="edge">The edge size of the column/bar</param>
            <param name="segments">The number of sides of the column/bar profile.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnBar3DShapes.AddSide(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Int32)">
            <summary>
            Creates a side for the column with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="height">The height of the column</param>
            <param name="edge">The edge size of the column</param>
            <param name="start">The start point of the profile segment.</param>
            <param name="end">The end point of the profile segment.</param>
            <param name="nextEnd">The end point of the next segment of the profile.</param>
            <param name="segments">The number of sides of the column profile.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnBar3DShapes.Top(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Windows.Point[],System.Double,System.Double,System.Double)">
            <summary>
            Creates the top for the bar with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="shapePoints">The shape points of the bar profile.</param>
            <param name="height">The height of the bar</param>
            <param name="width">The width of the column/bar</param>
            <param name="edge">The edge size of the bar</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnBar3DShapes.Bottom(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Windows.Point[],System.Double,System.Double,System.Double)">
            <summary>
            Creates the bottom for the column with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="shapePoints">The shape points of the column profile.</param>
            <param name="height">The height of the column</param>
            <param name="width">The width of the column/bar</param>
            <param name="edge">The edge size of the column</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnBar3DShapes.GetEdgePosition(System.Windows.Point,System.Windows.Point,System.Boolean,System.Double)">
            <summary>
            Makes correction of the profile positions because of the edge size.
            </summary>
            <param name="start">The start point of the profile segment</param>
            <param name="end">The end point of the profile segment</param>
            <param name="startEdge">True if the edge is next to the start position, false if the edge is next to the end position</param>
            <param name="edge">The size of the edge</param>
            <returns>The profile 2D position corrected for the edge size.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart3D.GetEdgeSize(System.Double,Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Calculates the edge size from data point size
            </summary>
            <param name="size">Data point size</param>
            <param name="point">Current Data Point</param>
            <returns>The edge size</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart3D.GetPointSize(System.Double,System.Double)">
            <summary>
            Calculates the data point size
            </summary>
            <param name="width">width od the data points scene space</param>
            <param name="depth">depth od the data points scene space</param>
            <returns>Data point size</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart3D.CreateBar(System.Int32,System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,System.Windows.Media.Brush,System.Windows.Media.Media3D.RotateTransform3D,System.Boolean,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Double)">
            <summary>
            This method creates 3D bar which represents one data point. Bar can 
            have different shape profiles (square, triangle, octagon, star, etc). 3D Bar 
            has an edge by default.
            </summary>
            <param name="index">The bar index</param>
            <param name="center">The center of the bar</param>
            <param name="width">The width of the bar</param>
            <param name="height">The height of the bar</param>
            <param name="depth">The depth of the bar</param>
            <param name="brush">The brush used for bar</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
            <param name="negativeValue">true if the value of the data point is negative. Used for animation.</param>
            <param name="point">The data point which represents this bar.</param>
            <param name="pointIndex">An index of the data point</param>
            <param name="edge">Edge size</param>
            <returns>Geometry model of the 3D cube</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart3D.CreateColumnLabel(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,System.Windows.Media.Brush,System.Boolean,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Double)">
            <summary>
            This method creates a rectangle in the 3D space and fills that 
            rectangle with a label using drawing brush.
            </summary>
            <param name="center">The center of the bar</param>
            <param name="width">The width of the bar</param>
            <param name="height">The height of the bar</param>
            <param name="depth">The depth of the bar</param>
            <param name="brush">The brush used for bar</param>
            <param name="negativeValue">True if data point value is negative</param>
            <param name="point">The data point which represents this bar.</param>
            <param name="pointIndex">An index of the data point</param>
            <param name="edge">The edge size of the bar</param>
            <returns>Geometry model of the 3D surface with a label as Drawing brush</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart3D.AddSide(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Int32)">
            <summary>
            Creates a side for the bar with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="height">The height of the bar</param>
            <param name="edge">The edge size of the bar</param>
            <param name="start">The start point of the profile segment.</param>
            <param name="end">The end point of the profile segment.</param>
            <param name="nextEnd">The end point of the next segment of the profile.</param>
            <param name="segments">The number of sides of the bar profile.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart3D.FindNormalCenter(System.Windows.Point,System.Windows.Point,System.Double,System.Double,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Finds the center point of the curve used as profile for an edge. This point is used to 
            find normal vectors of the edge control points and to create a curved edge effect.
            </summary>
            <param name="start">The start point of an edge line.</param>
            <param name="end">The end point of an edge line</param>
            <param name="y">y position of an edge</param>
            <param name="edge">the edge size</param>
            <param name="normal">The normal vector of the top</param>
            <returns>The center point</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart3D.GetPosition(System.Windows.Point,System.Windows.Point,System.Double,System.Boolean,System.Double)">
            <summary>
            Creates 3D point from 2D position of the bar profile.
            </summary>
            <param name="start">The start point of the profile segment</param>
            <param name="end">The end point of the profile segment</param>
            <param name="y">Y position of the 3D point.</param>
            <param name="startEdge">True if the edge is next to the start position, false if the edge is next to the end position</param>
            <param name="edge">The size of the edge</param>
            <returns>Point 3D created from 2D profile.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart3D.Top(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Windows.Point[],System.Double,System.Double,System.Double)">
            <summary>
            Creates the top for the bar with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="shapePoints">The shape points of the bar profile.</param>
            <param name="height">The height of the bar</param>
            <param name="width">The width of the column/bar</param>
            <param name="edge">The edge size of the bar</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.BarChart3D.Bottom(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Windows.Point[],System.Double,System.Double,System.Double)">
            <summary>
            Creates the bottom for the bar with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="shapePoints">The shape points of the bar profile.</param>
            <param name="height">The height of the bar</param>
            <param name="width">The width of the column/bar</param>
            <param name="edge">The edge size of the bar</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.BarChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BarChart3D.IsBar">
            <summary>
            Gets a Boolean value that specifies whether this chart type has Bar type axis
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.BubbleChart3D">
            <summary>
            This class creates 3D Bubble chart. This class is also 
            responsible for 3D Bubble chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.BubbleChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.BubbleChart3D.CreateBubbleLabel(System.Windows.Media.Media3D.Point3D,System.Double,System.Windows.Media.Brush,Infragistics.Windows.Chart.DataPoint,System.Int32)">
            <summary>
            This method creates a rectangle in the 3D space and fills that 
            rectangle with a label using drawing brush.
            </summary>
            <param name="center">The center of the bubble</param>
            <param name="radius">The radius of the bubble</param>
            <param name="brush">The brush used for bubble</param>
            <param name="point">The data point which represents this bubble.</param>
            <param name="pointIndex">An index of the data point</param>
            <returns>Geometry model of the 3D surface with a label as Drawing brush</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BubbleChart3D.CreateBubble(System.Windows.Media.Media3D.Point3D,System.Double,System.Windows.Media.Brush,System.Windows.Media.Media3D.RotateTransform3D,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32,Infragistics.Windows.Chart.ChartSeries)">
            <summary>
            Creates one sphere which represents a data point. This method animates the 
            sphere and creates material and transformation matrix.
            </summary>
            <param name="center">The center of the sphere</param>
            <param name="radius">The radius of the sphere</param>
            <param name="brush">The brush used for the sphere</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene</param>
            <param name="point">The data point which represents this bubble</param>
            <param name="pointIndex">An index of the data point</param>
            <param name="segments">The number of segments used to create a sphere. More segments mean better quality of sphere, but slow performance of the rendering and animation.</param>
            <param name="chartSeries">Chart series which produce Bubble</param>
            <returns>Geometry model of the 3D sphere</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BubbleChart3D.AddSphere(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Int32)">
            <summary>
            Create mesh for a sphere.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="radius">The sphere radius</param>
            <param name="segments">The number of segments used to create a sphere. More segments mean better quality of sphere, but slow performance of the rendering and animation.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.BubbleChart3D.SpherePosition(System.Double,System.Double,System.Double)">
            <summary>
            Get position of sphere mesh points using y coordinate 
            and alpha angle.
            </summary>
            <param name="alpha">The angle in XZ plane</param>
            <param name="y">Y position</param>
            <param name="radius">The sphere radius</param>
            <returns>The point position</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.BubbleChart3D.SphereTexturePosition(System.Double,System.Double,System.Double)">
            <summary>
            Finds the position of a 2D point mapped to 
            a texture from 3D space.
            </summary>
            <param name="alpha">The position of the 3D point using angle in XZ plane.</param>
            <param name="y">The position of the 3D point using Y coordinate.</param>
            <param name="radius">The sphere radius</param>
            <returns>Mapped position on the texture.</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.BubbleChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BubbleChart3D.IsScatter">
            <summary>
            Gets a Boolean value that specifies whether this chart type 
            uses all value axes (scatter chart).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BubbleChart3D.IsBubble">
            <summary>
            Gets a Boolean value that specifies whether this chart type 
            is Bubble.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.BubbleChart2D">
            <summary>
            This class creates 2D bubble chart. This class is also 
            responsible for 2D bubble chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.BubbleChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.BubbleChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.BubbleChart2D.AddShape(System.Windows.Point,System.Double,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes.
            </summary>
            <param name="center">Bubble center.</param>
            <param name="radius">The radius of bubble chart.</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.BubbleChart2D.AddTemplate(System.Windows.Point,System.Double,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes.
            </summary>
            <param name="center">Bubble center.</param>
            <param name="radius">The radius of bubble chart.</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.BubbleChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BubbleChart2D.IsScatter">
            <summary>
            Gets a Boolean value that specifies whether this chart type 
            uses all value axes (scatter chart).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BubbleChart2D.IsBubble">
            <summary>
            Gets a Boolean value that specifies whether this chart type 
            is Bubble.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.CandlestickChart2D">
            <summary>
            This class creates 2D Candlestick chart. This class is also 
            responsible for 2D Candlestick chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.CandlestickChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.CandlestickChart2D.AddShape(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32,System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            This method draws data points as shapes.
            </summary>
            <param name="high">Pixel y position of High price</param>
            <param name="low">Pixel y position of Low price</param>
            <param name="open">Pixel y position of Open price</param>
            <param name="close">Pixel y position of Close price</param>
            <param name="x">Pixel x position for all prices</param>
            <param name="width">The width of data point space</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
            <param name="negativeBrush">The brush used to fill the candlestick Open � Close rectangle if difference between Open price and Close price is negative.</param>
            <param name="negativeStrokeBrush">The stroke brush used for candlestick Open � Close rectangle if difference between Open price and Close price is negative.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.CandlestickChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.CandlestickChart2D.IsStock">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stock type (High, Low, Open, Close)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.CandlestickChart3D">
            <summary>
            This class creates 3D Candlestick chart. This class is also 
            responsible for 3D Candlestick chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.CandlestickChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.CandlestickChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.CandlestickChart3D.IsStock">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stock type (High, Low, Open, Close)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.PointChart2D">
            <summary>
            This class creates 2D line chart. This class is also 
            responsible for 2D line chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.PointChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.PointChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.PointChart2D.IsMarkerPoint">
            <summary>
            Gets a Boolean value that specifies whether this chart type has 
            only marker as a data point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.PointChart2D.IsStrokeMainColor">
            <summary>
            Gets a Boolean value that specifies whether this chart type uses only stroke brush 
            and doesn�t use fill brush.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.PointChart3D">
            <summary>
            This class creates 3D point chart. This class is also 
            responsible for 3D point chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.PointChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PointChart3D.CreateMarkerPoint(System.Int32,System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,System.Windows.Media.Brush,System.Windows.Media.Media3D.RotateTransform3D,Infragistics.Windows.Chart.DataPoint,System.Int32)">
            <summary>
            This method creates 3D Marker which represents one data point. Marker can 
            have different shape profiles (triangle, cube, star, etc). 3D Marker 
            has an edge by default.
            </summary>
            <param name="index">The marker index</param>
            <param name="center">The center of the marker</param>
            <param name="width">The width of the marker</param>
            <param name="height">The height of the marker</param>
            <param name="depth">The depth of the marker</param>
            <param name="brush">The brush used for marker</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
            <param name="point">The data point which represents this marker.</param>
            <param name="pointIndex">An index of the data point</param>
            <returns>Geometry model of the 3D cube</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.PointChart3D.AddSide(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Int32)">
            <summary>
            Creates a side for the marker with edges for different profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="height">The height of the marker</param>
            <param name="edge">The edge size of the marker</param>
            <param name="start">The start point of the profile segment.</param>
            <param name="end">The end point of the profile segment.</param>
            <param name="nextEnd">The end point of the next segment of the profile.</param>
            <param name="segments">The number of sides of the bar profile.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PointChart3D.GetPosition(System.Windows.Point,System.Windows.Point,System.Double,System.Boolean,System.Double)">
            <summary>
            Creates 3D point from 2D position of the marker profile.
            </summary>
            <param name="start">The start point of the profile segment</param>
            <param name="end">The end point of the profile segment</param>
            <param name="y">Y position of the 3D point.</param>
            <param name="startEdge">True if the edge is next to the start position, false if the edge is next to the end position</param>
            <param name="edge">The size of the edge</param>
            <returns>Point 3D created from 2D profile.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.PointChart3D.Top(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Windows.Point[],System.Double,System.Double,System.Double)">
            <summary>
            Creates the top for the bar with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="shapePoints">The shape points of the bar profile.</param>
            <param name="height">The height of the bar</param>
            <param name="width">The width of the column/bar</param>
            <param name="edge">The edge size of the bar</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PointChart3D.Bottom(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Windows.Point[],System.Double,System.Double,System.Double)">
            <summary>
            Creates the bottom for the bar with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="shapePoints">The shape points of the bar profile.</param>
            <param name="height">The height of the bar</param>
            <param name="width">The width of the column/bar</param>
            <param name="edge">The edge size of the bar</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.PointChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ScatterChart3D">
            <summary>
            This class creates 3D scatter chart. This class is also 
            responsible for 3D scatter chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScatterChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterChart3D.IsScatter">
            <summary>
            Gets a Boolean value that specifies whether this chart type 
            uses all value axes (scatter chart).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ScatterChart2D">
            <summary>
            This class creates 2D scatter chart. This class is also 
            responsible for 2D scatter chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.MarkerSeries.Draw2D">
            <summary>
            Draw markers using shape UI elements. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.MarkerSeries.AddTemplate(System.Windows.Point,System.Double,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes.
            </summary>
            <param name="center">Bubble center.</param>
            <param name="radius">The radius of bubble chart.</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.MarkerSeries.AddLabel(System.Windows.Point,Infragistics.Windows.Chart.DataPoint,System.Double)">
            <summary>
            Add a Label to the marker
            </summary>
            <param name="center">The center of the marker</param>
            <param name="point">Data point used for marker text</param>
            <param name="markerSize">The marker size</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.MarkerSeries.CreateMarkerText(Infragistics.Windows.Chart.ChartCreator,Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Creates formated text for marker
            </summary>
            <param name="chartCreator">Chart Creator</param>
            <param name="point">Data point used for marker text</param>
            <returns>Formated Marker text</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.MarkerSeries.CreateFormat(System.String)">
            <summary>
            Create string format changing property names for values with syntax used for .net string format.
            </summary>
            <param name="format">Input format string</param>
            <returns>.Net format string syntax</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.MarkerSeries.ChartSeries">
            <summary>
            Gets or sets chart series
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.MarkerSeries.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScatterChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScatterChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterChart2D.IsStrokeMainColor">
            <summary>
            Gets a Boolean value that specifies whether this chart type uses only stroke brush 
            and doesn�t use fill brush.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterChart2D.IsMarkerPoint">
            <summary>
            Gets a Boolean value that specifies whether this chart type has 
            only marker as a data point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterChart2D.IsScatter">
            <summary>
            Gets a Boolean value that specifies whether this chart type 
            uses all value axes (scatter chart).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.StockChart3D">
            <summary>
            This class creates 3D stock chart. This class is also 
            responsible for 3D stock chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StockChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.StockChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StockChart3D.IsStock">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stock type (High, Low, Open, Close)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.StockChart2D">
            <summary>
            This class creates 2D stock chart. This class is also 
            responsible for 2D stock chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StockChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StockChart2D.AddShape(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes.
            </summary>
            <param name="high">Pixel y position of High price</param>
            <param name="low">Pixel y position of Low price</param>
            <param name="open">Pixel y position of Open price</param>
            <param name="close">Pixel y position of Close price</param>
            <param name="x">Pixel x position for all prices</param>
            <param name="width">The width of data point space</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.StockChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StockChart2D.IsStock">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stock type (High, Low, Open, Close)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StockChart2D.IsStrokeMainColor">
            <summary>
            Gets a Boolean value that specifies whether this chart type uses only stroke brush 
            and doesn�t use fill brush.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Stacked100AreaChart3D">
            <summary>
            This class creates 3D stacked 100% area chart. This class is also 
            responsible for 3D stacked 100% area chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.AreaChart3D">
            <summary>
            This class creates 3D area chart. This class is also 
            responsible for 3D area chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AreaChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.AreaChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stacked100AreaChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100AreaChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100AreaChart3D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100AreaChart3D.IsStacked100">
            <summary>
            Gets a Boolean value that specifies whether this chart type is 100% stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Stacked100AreaChart2D">
            <summary>
            This class creates 2D stacked 100% area chart. This class is also 
            responsible for 2D stacked 100% area chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.AreaChart2D">
            <summary>
            This class creates 2D area chart. This class is also 
            responsible for 2D area chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AreaChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AreaChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AreaChart2D.AddShape(System.Windows.Rect,System.Windows.Point[],Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes.
            </summary>
            <param name="rect">Bounding rectangle of a data point shape.</param>
            <param name="points">Area shape of a data point</param>
            <param name="point">Data point</param>
            <param name="pointIndex">Data point index</param>
            <param name="seriesIndex">Series index</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AreaChart2D.AddTemplate(System.Windows.Rect,System.Windows.Point[],Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes using data templates.
            </summary>
            <param name="rect">Column rectangle which represent a data point.</param>
            <param name="points">Area shape of a data point</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.AreaChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stacked100AreaChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100AreaChart2D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100AreaChart2D.IsStacked100">
            <summary>
            Gets a Boolean value that specifies whether this chart type is 100% stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Stacked100BarChart2D">
            <summary>
            This class creates 2D stacked 100% bar chart. This class is also 
            responsible for 2D stacked 100% bar chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stacked100BarChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100BarChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100BarChart2D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100BarChart2D.IsStacked100">
            <summary>
            Gets a Boolean value that specifies whether this chart type is 100% stacked chart type
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100BarChart2D.IsBar">
            <summary>
            Gets a Boolean value that specifies whether this chart type has Bar type axis
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.StackedBarChart2D">
            <summary>
            This class creates 2D stacked bar chart. This class is also 
            responsible for 2D stacked bar chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StackedBarChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StackedBarChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedBarChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedBarChart2D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedBarChart2D.IsBar">
            <summary>
            Gets a Boolean value that specifies whether this chart type has Bar type axis
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Stacked100CylinderBarChart3D">
            <summary>
            This class creates 3D stacked 100% cylinder bar chart. This class is also 
            responsible for 3D stacked 100% cylinder bar chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.CylinderBarChart3D">
            <summary>
            This class creates 3D cylinder bar chart. This class is also 
            responsible for 3D cylinder bar chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderBarChart3D.GetEdgeSize(System.Double,Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Calculates the edge size from data point size
            </summary>
            <param name="size">Data point size</param>
            <param name="point">Current Data Point</param>
            <returns>The edge size</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderBarChart3D.GetPointSize(System.Double,System.Double)">
            <summary>
            Calculates the data point size
            </summary>
            <param name="width">width od the data points scene space</param>
            <param name="depth">depth od the data points scene space</param>
            <returns>Data point size</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderBarChart3D.CylinderCurve(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="radius">A radius of the cylinder.</param>
            <param name="height">A height of the cylinder.</param>
            <param name="edge">The size of the cylinder edge.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderBarChart3D.CylinderTopBottom(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            This 3D element presents the top or the bottom of the cylinder.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="radius">A radius of the cylinder.</param>
            <param name="height">A height of the cylinder.</param>
            <param name="top">True if this is the top of the cylinder, false for bottom.</param>
            <param name="edge">The size of the cylinder edge.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderBarChart3D.CylinderEdgeRounded(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            This 3D element presents the rounded edge of the cylinder.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="radius">A radius of the cylinder.</param>
            <param name="height">A height of the cylinder.</param>
            <param name="top">True if the edge is at the top of the cylinder.</param>
            <param name="edge">The size of the cylinder edge.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.CylinderBarChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.CylinderBarChart3D.IsBar">
            <summary>
            Gets a Boolean value that specifies whether this chart type has Bar type axis
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stacked100CylinderBarChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100CylinderBarChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100CylinderBarChart3D.IsBar">
            <summary>
            Gets a Boolean value that specifies whether this chart type has Bar type axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100CylinderBarChart3D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100CylinderBarChart3D.IsStacked100">
            <summary>
            Gets a Boolean value that specifies whether this chart type is 100% stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Stacked100BarChart3D">
            <summary>
            This class creates 3D stacked 100% bar chart. This class is also 
            responsible for 3D stacked 100% bar chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stacked100BarChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100BarChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100BarChart3D.IsBar">
            <summary>
            Gets a Boolean value that specifies whether this chart type has Bar type axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100BarChart3D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100BarChart3D.IsStacked100">
            <summary>
            Gets a Boolean value that specifies whether this chart type is 100% stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Stacked100CylinderChart3D">
            <summary>
            This class creates 3D stacked 100% cylinder chart. This class is also 
            responsible for 3D stacked 100% cylinder chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.CylinderChart3D">
            <summary>
            This class creates 3D cylinder chart. This class is also 
            responsible for 3D cylinder chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderChart3D.GetEdgeSize(System.Double,Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Calculates the edge size from data point size
            </summary>
            <param name="size">Data point size</param>
            <param name="point">Current Data Point</param>
            <returns>The edge size</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderChart3D.GetPointSize(System.Double,System.Double)">
            <summary>
            Calculates the data point size
            </summary>
            <param name="width">width od the data points scene space</param>
            <param name="depth">depth od the data points scene space</param>
            <returns>Data point size</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderChart3D.CylinderCurve(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="radius">A radius of the cylinder.</param>
            <param name="height">A height of the cylinder.</param>
            <param name="edge">The size of the cylinder edge.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderChart3D.CylinderTopBottom(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            This 3D element presents the top or the bottom of the cylinder.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="radius">A radius of the cylinder.</param>
            <param name="height">A height of the cylinder.</param>
            <param name="top">True if this is the top of the cylinder, false for bottom.</param>
            <param name="edge">The size of the cylinder edge.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.CylinderChart3D.CylinderEdgeRounded(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            This 3D element presents the rounded edge of the cylinder.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="radius">A radius of the cylinder.</param>
            <param name="height">A height of the cylinder.</param>
            <param name="top">True if the edge is at the top of the cylinder.</param>
            <param name="edge">The size of the cylinder edge.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.CylinderChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stacked100CylinderChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100CylinderChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100CylinderChart3D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100CylinderChart3D.IsStacked100">
            <summary>
            Gets a Boolean value that specifies whether this chart type is 100% stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Stacked100ColumnChart3D">
            <summary>
            This class creates 3D stacked 100% column chart. This class is also 
            responsible for 3D stacked 100% column chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ColumnChart3D">
            <summary>
            This class creates 3D column chart. This class is also 
            responsible for 3D column chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart3D.GetEdgeSize(System.Double,Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Calculates the edge size from data point size
            </summary>
            <param name="size">Data point size</param>
            <param name="point">Current Data Point</param>
            <returns>The edge size</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart3D.GetPointSize(System.Double,System.Double)">
            <summary>
            Calculates the data point size
            </summary>
            <param name="width">width od the data points scene space</param>
            <param name="depth">depth od the data points scene space</param>
            <returns>Data point size</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart3D.CreateColumn(System.Int32,System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,System.Windows.Media.Brush,System.Windows.Media.Media3D.RotateTransform3D,System.Boolean,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Double)">
            <summary>
            This method creates 3D column which represents one data point. Column can 
            have different shape profiles (square, triangle, octagon, star, etc). 3D Column 
            has an edge by default.
            </summary>
            <param name="index">The column index</param>
            <param name="center">The center of the column</param>
            <param name="width">The width of the column</param>
            <param name="height">The height of the column</param>
            <param name="depth">The depth of the column</param>
            <param name="brush">The brush used for column</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
            <param name="negativeValue">true if the value of the data point is negative. Used for animation.</param>
            <param name="point">The data point which represents this column.</param>
            <param name="pointIndex">An index of the data point</param>
            <param name="edge">edge size</param>
            <returns>Geometry model of the 3D cube</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart3D.CreateColumnLabel(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,System.Windows.Media.Brush,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Double)">
            <summary>
            This method creates a rectangle in the 3D space and fills that 
            rectangle with a label using drawing brush.
            </summary>
            <param name="center">The center of the column</param>
            <param name="width">The width of the column</param>
            <param name="height">The height of the column</param>
            <param name="depth">The depth of the column</param>
            <param name="brush">The brush used for column</param>
            <param name="point">The data point which represents this column.</param>
            <param name="pointIndex">An index of the data point</param>
            <param name="edge">The edge size of the column</param>
            <returns>Geometry model of the 3D surface with a label as Drawing brush</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart3D.AddSide(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Int32)">
            <summary>
            Creates a side for the column with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="height">The height of the column</param>
            <param name="edge">The edge size of the column</param>
            <param name="start">The start point of the profile segment.</param>
            <param name="end">The end point of the profile segment.</param>
            <param name="nextEnd">The end point of the next segment of the profile.</param>
            <param name="segments">The number of sides of the column profile.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart3D.FindNormalCenter(System.Windows.Point,System.Windows.Point,System.Double,System.Double,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Finds the center point of the curve used as profile for an edge. This point is used to 
            find normal vectors of the edge control points and to create a curved edge effect.
            </summary>
            <param name="start">The start point of an edge line.</param>
            <param name="end">The end point of an edge line</param>
            <param name="y">y position of an edge</param>
            <param name="edge">the edge size</param>
            <param name="normal">The normal vector of the top</param>
            <returns>The center point</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart3D.GetPosition(System.Windows.Point,System.Windows.Point,System.Double,System.Boolean,System.Double)">
            <summary>
            Creates 3D point from 2D position of the column profile.
            </summary>
            <param name="start">The start point of the profile segment</param>
            <param name="end">The end point of the profile segment</param>
            <param name="y">Y position of the 3D point.</param>
            <param name="startEdge">True if the edge is next to the start position, false if the edge is next to the end position</param>
            <param name="edge">The size of the edge</param>
            <returns>Point 3D created from 2D profile.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart3D.Top(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Windows.Point[],System.Double,System.Double,System.Double)">
            <summary>
            Creates the top for the column with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="shapePoints">The shape points of the column profile.</param>
            <param name="height">The height of the column</param>
            <param name="width">The width of the column/bar</param>
            <param name="edge">The edge size of the column</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart3D.Bottom(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Windows.Point[],System.Double,System.Double,System.Double)">
            <summary>
            Creates the bottom for the column with edges for different column profiles.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="shapePoints">The shape points of the column profile.</param>
            <param name="height">The height of the column</param>
            <param name="width">The width of the column/bar</param>
            <param name="edge">The edge size of the column</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.ColumnChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stacked100ColumnChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100ColumnChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100ColumnChart3D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100ColumnChart3D.IsStacked100">
            <summary>
            Gets a Boolean value that specifies whether this chart type is 100% stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Stacked100ColumnChart2D">
            <summary>
            This class creates 2D stacked 100% column chart. This class is also 
            responsible for 2D stacked 100% column chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ColumnChart2D">
            <summary>
            This class creates 2D column chart. This class is also 
            responsible for 2D column chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart2D.GetNumberOfColumnSeries(System.Collections.Generic.List{Infragistics.Windows.Chart.Series})">
            <summary>
            Returns the number of column series
            </summary>
            <param name="seriesList">The list of all series</param>
            <returns>The number of column series</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart2D.AddShape(System.Windows.Rect,System.Boolean,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes.
            </summary>
            <param name="rect">Column rectangle which represent a data point.</param>
            <param name="positive">True if a data point value is positive.</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart2D.AddTemplate(System.Windows.Rect,System.Boolean,Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes using data templates.
            </summary>
            <param name="rect">Column rectangle which represent a data point.</param>
            <param name="positive">True if a data point value is positive.</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart2D.FindClusterPointWidth(Infragistics.Windows.Chart.ChartType,System.Collections.Generic.List{Infragistics.Windows.Chart.Series},System.Double)">
            <summary>
            Search series for point width. Because of cluster and stacked chart types all series 
            have to have same point width.
            </summary>
            <param name="type">Chart type</param>
            <param name="seriesList">Data Series</param>
            <param name="defaultWidth">Default point width</param>
            <returns>Point width</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ColumnChart2D.FindClusterPointWidth(Infragistics.Windows.Chart.ChartType,Infragistics.Windows.Chart.ChartType,System.Collections.Generic.List{Infragistics.Windows.Chart.Series},System.Double)">
            <summary>
            Search series for point width. Because of cluster and stacked chart types all series 
            have to have same point width.
            </summary>
            <param name="type1">First Chart type</param>
            <param name="type2">Second Chart type</param>
            <param name="seriesList">Data Series</param>
            <param name="defaultWidth">Default point width</param>
            <returns>Point width</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.ColumnChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ColumnChart2D.IsClustered">
            <summary>
            Gets a Boolean value that specifies whether this chart 
            type is clustered
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stacked100ColumnChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100ColumnChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100ColumnChart2D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stacked100ColumnChart2D.IsStacked100">
            <summary>
            Gets a Boolean value that specifies whether this chart type is 100% stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ScatterLineChart3D">
            <summary>
            This class creates 3D scatter line chart. This class is also 
            responsible for 3D scatter line chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.LineChart3D">
            <summary>
            This class creates 3D line chart. This class is also 
            responsible for 3D line chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.LineChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.LineChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScatterLineChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScatterLineChart3D.CylinderCurve(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Double)">
            <summary>
            Create 3D cylinder curve
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="radius">A radius of the cylinder.</param>
            <param name="height">A height of the cylinder.</param>
            <param name="edge">The size of the cylinder edge.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScatterLineChart3D.CylinderTopBottom(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            This 3D element presents the top or the bottom of the cylinder.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D.</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D.</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D.</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D.</param>
            <param name="radius">A radius of the cylinder.</param>
            <param name="height">A height of the cylinder.</param>
            <param name="top">True if this is the top of the cylinder, false for bottom.</param>
            <param name="edge">The size of the cylinder edge.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterLineChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterLineChart3D.IsScatter">
            <summary>
            Gets a Boolean value that specifies whether this chart type 
            uses all value axes (scatter chart).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ScatterLineChart2D">
            <summary>
            This class creates 2D scatter line chart. This class is also 
            responsible for 2D scatter line chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.LineChart2D">
            <summary>
            This class creates 2D line chart. This class is also 
            responsible for 2D line chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.LineChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.LineChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.LineChart2D.AddShape(System.Windows.Point[],Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            This method draws data points as shapes.
            </summary>
            <param name="points">Shape points.</param>
            <param name="point">Data points.</param>
            <param name="seriesIndex">Index of the current series.</param>
            <param name="pointIndex">A data point index.</param>
            <param name="splineMax">Spline length in X axis units.</param>
            <param name="splineStart">X value where spline starts</param>
            <param name="splineEnd">X value where spline ends</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.LineChart2D.AddTemplate(System.Windows.Rect,System.Windows.Point[],Infragistics.Windows.Chart.DataPoint,System.Int32,System.Int32)">
            <summary>
            This method draws data points as shapes using data templates.
            </summary>
            <param name="rect">Column rectangle which represent a data point.</param>
            <param name="points">Area shape of a data point</param>
            <param name="point">Coresponding data point.</param>
            <param name="pointIndex">Current data point index.</param>
            <param name="seriesIndex">Current series index.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.LineChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LineChart2D.IsStrokeMainColor">
            <summary>
            Gets a Boolean value that specifies whether this chart type uses only stroke brush 
            and doesn�t use fill brush.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScatterLineChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScatterLineChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterLineChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterLineChart2D.IsStrokeMainColor">
            <summary>
            Gets a Boolean value that specifies whether this chart type uses only stroke brush 
            and doesn�t use fill brush.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScatterLineChart2D.IsScatter">
            <summary>
            Gets a Boolean value that specifies whether this chart type 
            uses all value axes (scatter chart).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.StackedBarChart3D">
            <summary>
            This class creates 3D stacked bar chart. This class is also 
            responsible for 3D stacked bar chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StackedBarChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedBarChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedBarChart3D.IsBar">
            <summary>
            Gets a Boolean value that specifies whether this chart type has Bar type axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedBarChart3D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.StackedCylinderBarChart3D">
            <summary>
            This class creates 3D stacked cylinder bar chart. This class is also 
            responsible for 3D stacked cylinder bar chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StackedCylinderBarChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedCylinderBarChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedCylinderBarChart3D.IsBar">
            <summary>
            Gets a Boolean value that specifies whether this chart type has Bar type axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedCylinderBarChart3D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.DataBindEventArgs">
            <summary>
            Event arguments for routed event <see cref="E:Infragistics.Windows.Chart.XamChart.DataBind"/>
            </summary>
            <seealso cref="E:Infragistics.Windows.Chart.XamChart.DataBind"/>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.DataBindEvent"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataBindEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DataBindEventArgs class. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartRenderingEventArgs">
            <summary>
            Event arguments for routed event <see cref="E:Infragistics.Windows.Chart.XamChart.ChartRendering"/>
            </summary>
            <seealso cref="E:Infragistics.Windows.Chart.XamChart.ChartRendering"/>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.ChartRenderingEvent"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartRenderingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ChartRenderingEventArgs class. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartRenderedEventArgs">
            <summary>
            Event arguments for routed event <see cref="E:Infragistics.Windows.Chart.XamChart.ChartRendered"/>
            </summary>
            <seealso cref="E:Infragistics.Windows.Chart.XamChart.ChartRendered"/>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.ChartRenderedEvent"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartRenderedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ChartRenderedEventArgs class. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.XamChart">
            <summary>
            The xamChart control provides a framework for creating charting applications, or adding charting 
            capability to existing data or information-driven applications.
            </summary>
            <remarks>
            The xamChart control contains a collection of charts. Each individual chart has many of the same 
            properties as xamChart itself: Series, Axes, Legend, Caption, Lights, Transform3D, etc. In addition, 
            each individual chart contains its own chart collection. Because each chart contain a collection of 
            charts, you can create nested charts where each chart can have multiple parent charts inside its 
            boundaries. When you use a chart as a parent (that is, it has children inside the chart collection), 
            it doesn't display chart data; it is only used as a container of other charts. 
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.IChart.Series">
            <summary>
            The collection of data series which are used to provide data to the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.IChart.Axes">
            <summary>
            Gets axis collection. Every axis has an AxisType which could be X, Y or Z.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.IChart.Caption">
            <summary>
            Gets or sets title for the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.IChart.Legend">
            <summary>
            Gets or sets legend for the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.IChart.Scene">
            <summary>
            Gets or sets scene for the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.IChart.View3D">
            <summary>
            Gets or sets a value that indicates whether the chart is rendered in 3D.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.IChart.Transform3D">
            <summary>
            Gets or sets 3D Transformation Matrix for 3D charts.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.IChart.Lights">
            <summary>
            Gets Collection with light objects that represent lighting applied to a 3-D scene.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.DataBindEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Chart.XamChart.DataBind"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Chart.XamChart.DataBind"/>
            <seealso cref="M:Infragistics.Windows.Chart.XamChart.OnDataBind(System.Windows.RoutedEventArgs)"/>
            <seealso cref="T:Infragistics.Windows.Chart.DataBindEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.OnDataBind(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when the chart is about to data bind series to the data source.
            </summary>
            <seealso cref="E:Infragistics.Windows.Chart.XamChart.DataBind"/>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.DataBindEvent"/>
            <seealso cref="T:Infragistics.Windows.Chart.DataBindEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.RaiseDataBind">
            <summary>
            Raise Data Bind event
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.ChartRenderingEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Chart.XamChart.ChartRendering"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Chart.XamChart.ChartRendering"/>
            <seealso cref="M:Infragistics.Windows.Chart.XamChart.OnChartRendering(System.Windows.RoutedEventArgs)"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.OnChartRendering(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs before the chart is about to be rendered.
            </summary>
            <seealso cref="E:Infragistics.Windows.Chart.XamChart.ChartRendering"/>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.ChartRenderingEvent"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.RaiseChartRendering">
            <summary>
            Raise Chart rendering event.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.ChartRenderedEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Chart.XamChart.ChartRendered"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Chart.XamChart.ChartRendered"/>
            <seealso cref="M:Infragistics.Windows.Chart.XamChart.OnChartRendered(System.Windows.RoutedEventArgs)"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.OnChartRendered(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs after the chart is rendered.
            </summary>
            <seealso cref="E:Infragistics.Windows.Chart.XamChart.ChartRendered"/>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.ChartRenderedEvent"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.RaiseChartRendered">
            <summary>
            Raise chart rendered event
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Chart.XamChart"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by 
            the layout system. The rendering instructions for this element are not used directly when this 
            method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.OnTheme(Infragistics.Windows.Chart.XamChart,System.String)">
            <summary>
            Merge resource dictionaries for themes.
            </summary>
            <param name="control">The chart control</param>
            <param name="theme">A theme</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this 
            FrameworkElement has been updated. The specific dependency property that changed 
            is reported in the arguments parameter. Overrides OnPropertyChanged. 
            </summary>
            <param name="e">Event arguments that describe the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.PropertyNeedRefresh(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Used to check if property value needs refresh
            </summary>
            <param name="parent">The parent object</param>
            <param name="e">Event arguments that describe the property that changed, as well as old and new values.</param>
            <returns>True if property value needs refresh</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.FillRandomColors">
            <summary>
            Create an array of random colors
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.GetRandomColor(System.Int32)">
            <summary>
            Get a random color from generated array of colors.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.RefreshProperty">
            <summary>
            Called when any dependency property from the chart 
            control and other classes is set.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.Refresh">
            <summary>
            Repaints chart control content.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.DataSourceRefresh">
            <summary>
            Perform a data binding. The DataSource property of a series has to be set before this method is called.
            </summary>
            <remarks>
            This method should be called only if the data source cannot be refreshed automatically in run time. 
            A <see cref="T:Infragistics.Windows.Chart.DataPoint"/> is created for every record, and the <see cref="P:Infragistics.Windows.Chart.DataPoint.Value"/> property of 
            the data point will be filled with a value from the specified data source. The series will be filled with created data points. 
            If <see cref="P:Infragistics.Windows.Chart.Series.DataMapping"/> property is not specified, only the <see cref="P:Infragistics.Windows.Chart.DataPoint.Value"/> property from data point will be set. To fill <see cref="P:Infragistics.Windows.Chart.DataPoint.Label"/> or 
            <see cref="P:Infragistics.Windows.Chart.DataPoint.ChartParameters"/> (Chart parameters keep values for Stock or Scatter chart types), 
            the <see cref="P:Infragistics.Windows.Chart.Series.DataMapping"/> property from the series has to be used. 
            </remarks>
            <seealso cref="P:Infragistics.Windows.Chart.Series.DataSource"/>
            <seealso cref="P:Infragistics.Windows.Chart.Series.DataMapping"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.OnApplyTemplate">
            <summary>
            Called when the template is applied
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.HitTest(System.Windows.Input.MouseEventArgs)">
            <summary>
            Returns the topmost data point of a hit test.
            </summary>
            <param name="e">Provides data for Mouse related events.</param>
            <returns>Provides data with information about selected data point.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.GetAxisRange(Infragistics.Windows.Chart.AxisType,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns minimum, maximum and unit axis values.
            </summary>
            <param name="type">Axis Type</param>
            <param name="minimum">Minimum axis value</param>
            <param name="maximum">Maximum axis value</param>
            <param name="unit">Axis unit</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.XamChart.GetPosition(Infragistics.Windows.Chart.AxisType,System.Double)">
            <summary>
            Returns position in pixels from an axis value.
            </summary>
            <param name="type">Axis Type</param>
            <param name="value">Axis value</param>
            <returns>Pixel position</returns>
            <seealso cref="M:Infragistics.Windows.Chart.XamChart.HitTest(System.Windows.Input.MouseEventArgs)"/>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.Transform3DProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.XamChart.Transform3D"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.CaptionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.XamChart.Caption"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.SceneProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.XamChart.Scene"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.LegendProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.XamChart.Legend"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.View3DProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.XamChart.View3D"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.RefreshEnabledProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.XamChart.RefreshEnabled"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.StartPaletteBrushProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.XamChart.StartPaletteBrush"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.EndPaletteBrushProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.XamChart.EndPaletteBrush"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.ThemeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.XamChart.Theme"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.XamChart.DrawExceptionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.XamChart.DrawException"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.ContentControlPropertyChanging">
            <summary>
            On property changed called and active
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.IsThemeChanging">
            <summary>
            Gets or sets a value that indicates whether the themes are changing.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.IsRefreshingMode">
            <summary>
            Gets or sets a value that indicates whether refreshing is in progress.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.IsAnimationEnabled">
            <summary>
            Gets or sets a value that indicates whether the animation is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.DefaultChart">
            <summary>
            Deafult Chart
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.DefaultAxisX">
            <summary>
            Deafult axis X
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.DefaultAxisY">
            <summary>
            Deafult axis Y
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.DefaultAxisZ">
            <summary>
            Deafult axis Z
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.LogicalTreeMode">
            <summary>
            When a UIElement is added to the logical tree, properties of the UIElement 
            are set from the tree. Every time when a property is set the refresh method 
            is called. This property is used to prevent refreshing when UIElements are 
            added to the visual tree.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Chart.XamChart.DataBind">
            <summary>
            This event occurs immediately after data binding. This event is used to change color or appearance of data points after binding.
            </summary>
            <remarks>
            When data binding is used a new series without data points has to be created. Data binding process will create data points and set 
            Value property from data points using values from the data source.  To change color or other properties of data points we have 
            to use data bind event after data binding to specify new values. DataBind event occurs only ones after binding, for all series 
            from the chart.
            </remarks>
            <seealso cref="M:Infragistics.Windows.Chart.XamChart.OnDataBind(System.Windows.RoutedEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.DataBindEvent"/>
            <seealso cref="T:Infragistics.Windows.Chart.DataBindEventArgs"/>
        </member>
        <member name="E:Infragistics.Windows.Chart.XamChart.ChartRendering">
            <summary>
            This event occurs before the chart is rendered.
            </summary>
            <seealso cref="M:Infragistics.Windows.Chart.XamChart.OnChartRendering(System.Windows.RoutedEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.ChartRenderingEvent"/>
            <seealso cref="T:Infragistics.Windows.Chart.ChartRenderingEventArgs"/>
        </member>
        <member name="E:Infragistics.Windows.Chart.XamChart.ChartRendered">
            <summary>
            This event occurs after the chart is rendered.
            </summary>
            <seealso cref="M:Infragistics.Windows.Chart.XamChart.OnChartRendered(System.Windows.RoutedEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.ChartRenderedEvent"/>
            <seealso cref="T:Infragistics.Windows.Chart.ChartRenderedEventArgs"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.Series">
            <summary>
            The collection of data series which are used to provide data to the chart.
            </summary>
            <remarks>
            When a chart is deployed on the page, a default column chart appears with two series. 
            This default chart does not contain any data, but when the chart is placed into a visual 
            design surface, the chart automatically creates demo data to give it some appearance will 
            it is being worked with, or until you supply your data. As soon as you add actual data to 
            the control, the demo data disappears from the chart. You cannot change the sample data 
            because it does not exist in the Series collection. 
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.Axes">
            <summary>
            Gets the axis collection. Every axis has an AxisType which could be PrimaryX, PrimaryY, PrimaryZ, SecondaryX and SecondaryY.
            </summary>
            <remarks>
            By default, the chart's axes do not exist in the Axes collection; however, 
            internally, default axes are created. If you don't want to modify the appearance 
            or range of the axes, grid lines, or axis labels, you can simply use the default 
            values of the axes. If you want to change the default axis values, you need 
            to create an axis and add it to the Axes collection.
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.Transform3D">
            <summary>
            Gets or sets Transformation Matrix for 3D charts that provides all three-dimensional transformations, including translation, rotation, and scale transformations.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.Transform3DProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.Caption">
            <summary>
            Gets or sets the chart caption. Keeps information about text value, font, color and position for a Chart title.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.CaptionProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.Scene">
            <summary>
            Gets or sets the scene which contains information related to chart scene appearance. The scene 
            is different for 2D and 3D chart. For 2D chart it is used for Background color 
            and position. For 3D chart it also containes thicknes of the 3D scene.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.SceneProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.Legend">
            <summary>
            Gets or sets the chart legend. The chart legend box appears alongside 
            the chart border. It is used to give text description for every data 
            point or series appearance in the chart. Many qualities of the legend 
            are dependent upon ChartType.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.LegendProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.View3D">
            <summary>
            Gets or sets a value that indicates whether the chart is rendered in 3D.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.View3DProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.RefreshEnabled">
            <summary>
            Gets or sets a value that indicates whether refreshing of the chart is enabled.
            </summary>
            <remarks>
            This property has to be used every time when data are changed in runtime to improve performance 
            of the rendering. For example, if we have observable collection which is used as a <see cref="P:Infragistics.Windows.Chart.Series.DataSource"/> 
            and we change values in the collection, every time when a value is changed the chart will be drawn. 
            Similar case is changing data point values in run time. To stop refreshing the chart RefreshEnabled 
            property has to be set to false before we change data and back to true after data is changed. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.RefreshEnabledProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.Lights">
            <summary>
            Gets Collection with lights that represent lighting applied to a 3-D scene. Used for 3D charts only.
            </summary>
            <remarks>
            For 3D charts, by default, a light effect is created with default values (one DirectionalLight, 
            and one PointLight). However, if you want to change the Light effects for the 3D scene, you need 
            to create a Light effect and add it to the Lights collection. When you add a Light effect to the collection, 
            the default Light effects disappear, and only newly created Light effects are used. 
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.StartPaletteBrush">
            <summary>
            Gets or sets the start Brush which is used to create a palette of colors for data points and series.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.StartPaletteBrushProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.EndPaletteBrush">
            <summary>
            Gets or sets the end Brush which is used to create a palette of colors for data points and series.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.EndPaletteBrushProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.Theme">
            <summary>
            Gets or sets the default look for the control.
            </summary>
            <remarks>
            <para class="body">If left set to null then the default 'Generic' theme will be used. 
            This property can be set to the name of any registered theme (see <see cref="M:Infragistics.Windows.Themes.ThemeManager.Register(System.String,System.String,System.Windows.ResourceDictionary)"/> and <see cref="M:Infragistics.Windows.Themes.ThemeManager.GetThemes"/> methods).</para>
            <para></para>
            <para class="note"><b>Note: </b> The following themes are pre-registered by this assembly but additional themes can be registered as well.
            <ul>
            <li>"Generic" - the default theme.</li>
            </ul>
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Themes.ThemeManager"/>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.ThemeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.XamChart.DrawException">
            <summary>
            Gets or sets a value that indicates whether an exception is drawn as a string message on the screen. Otherwise, exception will be thrown.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.XamChart.DrawExceptionProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.Chart">
            <summary>
            Chart contains basic chart elements: Grids, Axes, Labels, Data Points, 
            Legends, Titles, etc. The Chart control can have many Charts 
            as a nested elements.
            </summary>
            <remarks>
            The xamChart control contains a collection of charts. Each individual chart has many of 
            the same properties as xamChart itself: Series, Axes, Legend, Caption, Lights, Transform3D, etc. 
            In addition, each individual chart contains its own chart collection. Because each chart contain 
            a collection of charts, you can create nested charts where each chart can have multiple parent 
            charts inside its boundaries. When you use a chart as a parent (that is, it has children inside the 
            chart collection), it doesn't display chart data; it is only used as a container of other charts.
            
            Important - The nested chart functionality is disabled for the first release. Public properties from this class are not used.
            
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartContentControl">
            <summary>
            Chart Canvas is a special type of Canvas which use relative coordinates 
            and automatically resize all child elements. This class is a base class 
            for chart elements which use automatic resizing functionality as Chart. 
            This class shouldn�t be used. It exists because of internal purposes only.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.RenderTransform">
            <summary>
            Gets or sets transform information that affects the rendering position of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.LayoutTransform">
            <summary>
            Gets or sets a graphics transformation that should apply to this element when layout is performed. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of a control's content. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of a control's content. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.Width">
            <summary>
            Gets or sets the width of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.Height">
            <summary>
            Gets or sets the suggested height of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment characteristics applied 
            to this element when it is composed within a parent element, 
            such as a panel or items control. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment characteristics applied to 
            this element when it is composed within a parent element such as 
            a panel or items control. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.Opacity">
            <summary>
            Gets or sets the opacity factor applied to the entire UIElement 
            when it is rendered in the user interface (UI). 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.OpacityMask">
            <summary>
            Gets or sets an opacity mask, as a Brush implementation that is 
            applied to any alpha-channel masking for the rendered content 
            of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.ClipToBounds">
            <summary>
            Gets or sets a value indicating whether to clip the content 
            of this element (or content coming from the child elements of 
            this element) to fit into the size of the containing element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.SnapsToDevicePixels">
            <summary>
            Gets or sets a value that determines whether rendering for this element 
            should use device-specific pixel settings during rendering. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.AllowDrop">
            <summary>
            Gets or sets a value indicating whether this element 
            can be used as the target of a drag-and-drop operation. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.Clip">
            <summary>
            Gets or sets the geometry used to define the outline of 
            the contents of an element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.ContextMenu">
            <summary>
            Gets or sets the context menu element that should appear 
            whenever the context menu is requested through user 
            interface (UI) from within this element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.MaxHeight">
            <summary>
            Gets or sets the maximum height constraint of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.MaxWidth">
            <summary>
            Gets or sets the maximum width constraint of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.MinHeight">
            <summary>
            Gets or sets the minimum height constraint of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.Padding">
            <summary>
            Gets or sets the padding thickness for the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.MinWidth">
            <summary>
            Gets or sets the minimum width constraint of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.Visibility">
            <summary>
            Gets or sets the user interface (UI) visibility of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.DataContext">
            <summary>
            Gets or sets the data context for an element when it participates in data binding.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this element is enabled in the user interface (UI).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.Focusable">
            <summary>
            Gets or sets a value that indicates whether the element can receive focus. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.IsHitTestVisible">
            <summary>
            Gets or sets a value that declares whether this element can possibly be 
            returned as a hit test result from some portion of its rendered content.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.Tag">
            <summary>
            Gets or sets an arbitrary object value that can be used to 
            store custom information about this element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.FocusVisualStyle">
            <summary>
            Gets or sets a property that enables customization of appearance, 
            effects, or other style characteristics that will apply to this 
            element when it captures keyboard focus. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.ForceCursor">
            <summary>
            Gets or sets a value that indicates whether this FrameworkElement should force 
            the user interface (UI) to render the cursor as declared by the Cursor property. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.OverridesDefaultStyle">
            <summary>
            Gets or sets a value that indicates whether this element incorporates style 
            properties from theme styles.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.RenderTransformOrigin">
            <summary>
            Gets or sets the center point of any possible render transform declared by 
            RenderTransform, relative to the bounds of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartContentControl.Resources">
            <summary>
            Gets or sets the locally-defined resource dictionary.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.#ctor">
            <summary>
            Initializes a new instance of the Chart class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.OnInitialized(System.EventArgs)">
            <summary>
            Raises the Initialized event. This method is invoked whenever IsInitialized is set to true internally. 
            </summary>
            <param name="e">Arguments of the event.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.AddLogChild(System.Object)">
            <summary>
            Adds the provided element as a child of this element. This method has to be 
            used to avoid error which appears when the control template is edited 
            in design time in Blend.
            </summary>
            <param name="child">Child element to be added.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.GetRSString(System.String)">
            <summary>
            Retrieve the value of the string resource by name. The resource manager 
            will retrieve the value of the localized resource using the caller's current 
            culture setting.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.Refresh">
            <summary>
            Repaints the chart
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.RefreshWithException">
            <summary>
            Repaints the chart
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When implemented in a derived class, participates in rendering operations 
            that are directed by the layout system. The rendering instructions for this 
            element are not used directly when this method is invoked, and are instead 
            preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.Chart_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when the element is laid out, rendered, and ready for interaction. 
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Routed Event Args</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.BindData">
            <summary>
            Perform data binding to the series from this chart.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.GetAbsoluteX(System.Double)">
            <summary>
            Returns absolute position of the chart. By default 
            relative values are used from 0 to 100.
            </summary>
            <param name="value">Relative X position</param>
            <returns>Absolute X position</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.GetAbsoluteY(System.Double)">
            <summary>
            Returns absolute position of the chart. By default 
            relative values are used from 0 to 100.
            </summary>
            <param name="value">Relative Y position</param>
            <returns>Absolute Y position</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.GetChartTypes">
            <summary>
            Creates an array of chart types from series collection.
            </summary>
            <returns>Array of chart types</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.GetData">
            <summary>
            Create an array of data values from data points.
            </summary>
            <returns>Data values</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.GetContainer">
            <summary>
            This method gets an interface which contains public properties 
            for the chart. If the chart is the first parent properties 
            are taken from the chart control.
            </summary>
            <returns>Interface which contains public properties for the chart</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.HitTest(System.Windows.Input.MouseEventArgs)">
            <summary>
            Returns the topmost data point of a hit test.
            </summary>
            <param name="e">Provides data for Mouse related events.</param>
            <returns>Provides data with information about selected data point.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Chart.Transform3DProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Chart.Transform3D"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Chart.View3DProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Chart.View3D"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Chart.CaptionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Chart.Caption"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Chart.SceneProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Chart.Scene"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Chart.LegendProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Chart.Legend"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Chart.PositionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Chart.Position"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Chart.OnPositionValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.HitTestInfoArray">
            <summary>
            Gets array used to keep pairs of Geometry model 3D or Shape and 
            corresponding data point object.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.ChartCreator">
            <summary>
            Returns Chart Creator
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.Children">
            <summary>
            Gets collection of UIElements
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.UpdateDataSource">
            <summary>
            Gets or sets value which indicates that data source should be updated.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.FastRenderingMode">
            <summary>
            Gets or sets fast rendering mode.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.FinalSize">
            <summary>
            Returns final size
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.NestedChart">
            <summary>
            True if this chart is nested into another chart or false if this 
            chart belongs to the chart control.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.Series">
            <summary>
            The collection of data series which are used to provide data to the chart.
            </summary>
            <remarks>
            When a chart is deployed on the page, a default column chart appears with two series. 
            This default chart does not contain any data, but when the chart is placed into a visual 
            design surface, the chart automatically creates demo data to give it some appearance will 
            it is being worked with, or until you supply your data. As soon as you add actual data to 
            the control, the demo data disappears from the chart. You cannot change the sample data 
            because it does not exist in the Series collection. 
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.Lights">
            <summary>
            Gets Collection with light objects that represent lighting applied to a 3-D scene.
            </summary>
            <remarks>
            For 3D charts, by default, a light effect is created with default values (one DirectionalLight object, 
            and one PointLight object). However, if you want to change the Light effect for the 3D scene, you need 
            to create a Light effect and add it to the Lights collection. When you add a Light effect to the collection, 
            the default Light effect disappears, and only newly created Light effects can be used. 
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.Axes">
            <summary>
            Gets axis collection. Every axis has an AxisType which could be X, Y or Z.
            </summary>
            <remarks>
            By default, the chart's axis does not exist in the Axes collection; however, 
            internally, default axes are created. If you don't want to modify the appearance 
            or range of the axes, grid lines, or axis labels, you can simply use the default 
            values of the axes. If you want to change the the default axis values, you need 
            to create an axis and add it to the Axes collection.
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.Transform3D">
            <summary>
            Gets or sets Transformation Matrix for 3D charts that provides all three-dimensional transformations, including translation, rotation, and scale transformations.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Chart.Transform3DProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.View3D">
            <summary>
            Gets or sets a value that indicates whether the chart is rendered in 3D.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Chart.View3DProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.Caption">
            <summary>
            Gets or sets the chart caption. Keeps information about text value, font, color and position for a Chart title.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Chart.CaptionProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.Scene">
            <summary>
            Gets or sets the scene which contains information related to chart scene appearance. The scene 
            is different for 2D and 3D chart. For 2D chart it is used for Background color 
            and position. For 3D chart it also containes thicknes of the 3D scene.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Chart.SceneProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.Legend">
            <summary>
            Gets or sets the chart legend. The chart legend box appears alongside 
            the chart border. It is used to give text description for every data 
            point or series appearance in the chart. Many qualities of the legend 
            are dependent upon ChartType.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Chart.LegendProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.Position">
            <summary>
            Gets or sets relative position of the chart, ranging in value from 0 to 100.
            </summary>
            <remarks>
            The property uses percentage values as the unit, which means that the values for the left, right, top, and bottom of the rectangle could be values between 0 and 100. This allows you to easily resize the chart and all elements inside the chart.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Chart.PositionProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.MaxHeight">
            <summary>
            Gets or sets the maximum height constraint of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.MaxWidth">
            <summary>
            Gets or sets the maximum width constraint of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.MinHeight">
            <summary>
            Gets or sets the minimum height constraint of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.MinWidth">
            <summary>
            Gets or sets the minimum width constraint of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment characteristics applied 
            to this element when it is composed within a parent element, 
            such as a panel or items control. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Chart.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment characteristics applied to 
            this element when it is composed within a parent element such as 
            a panel or items control. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartCollection">
            <summary>
            Represents a collection of charts. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartCollection.#ctor">
            <summary>
            Initializes a new instance of the ChartCollection class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartCollection.InsertItem(System.Int32,Infragistics.Windows.Chart.Chart)">
            <summary>
            Inserts an item into the collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments. 
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCollection.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartCanvas">
            <summary>
            Chart Canvas is a special type of Canvas which use relative coordinates 
            and automatically resize all child elements. This class is a base class 
            for chart elements which use automatic resizing functionality as Chart. 
            This class shouldn�t be used. It exists because of internal purposes only.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.Size">
            <summary>
            Gets or sets Plotting pane size
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.SizeProportion">
            <summary>
            Gets or sets the size proportion.
            </summary>
            <value>The size proportion.</value>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.RenderTransform">
            <summary>
            Gets or sets transform information that affects the rendering position of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.LayoutTransform">
            <summary>
            Gets or sets a graphics transformation that should apply to this element when layout is performed. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.Margin">
            <summary>
            Gets or sets the outer margin of an element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.Width">
            <summary>
            Gets or sets the width of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.Height">
            <summary>
            Gets or sets the suggested height of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment characteristics applied 
            to this element when it is composed within a parent element, 
            such as a panel or items control. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment characteristics applied to 
            this element when it is composed within a parent element such as 
            a panel or items control. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.Opacity">
            <summary>
            Gets or sets the opacity factor applied to the entire UIElement 
            when it is rendered in the user interface (UI). 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.OpacityMask">
            <summary>
            Gets or sets an opacity mask, as a Brush implementation that is 
            applied to any alpha-channel masking for the rendered content 
            of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.ClipToBounds">
            <summary>
            Gets or sets a value indicating whether to clip the content 
            of this element (or content coming from the child elements of 
            this element) to fit into the size of the containing element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.SnapsToDevicePixels">
            <summary>
            Gets or sets a value that determines whether rendering for this element 
            should use device-specific pixel settings during rendering. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.AllowDrop">
            <summary>
            Gets or sets a value indicating whether this element 
            can be used as the target of a drag-and-drop operation. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.Clip">
            <summary>
            Gets or sets the geometry used to define the outline of 
            the contents of an element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.ContextMenu">
            <summary>
            Gets or sets the context menu element that should appear 
            whenever the context menu is requested through user 
            interface (UI) from within this element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.MaxHeight">
            <summary>
            Gets or sets the maximum height constraint of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.MaxWidth">
            <summary>
            Gets or sets the maximum width constraint of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.MinHeight">
            <summary>
            Gets or sets the minimum height constraint of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.MinWidth">
            <summary>
            Gets or sets the minimum width constraint of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.Visibility">
            <summary>
            Gets or sets the user interface (UI) visibility of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.DataContext">
            <summary>
            Gets or sets the data context for an element when it participates in data binding.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this element is enabled in the user interface (UI).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.ToolTip">
            <summary>
            Gets or sets the tool-tip object that is displayed for this element in the user interface (UI). 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.Focusable">
            <summary>
            Gets or sets a value that indicates whether the element can receive focus. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.IsHitTestVisible">
            <summary>
            Gets or sets a value that declares whether this element can possibly be 
            returned as a hit test result from some portion of its rendered content.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.Tag">
            <summary>
            Gets or sets an arbitrary object value that can be used to 
            store custom information about this element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.FocusVisualStyle">
            <summary>
            Gets or sets a property that enables customization of appearance, 
            effects, or other style characteristics that will apply to this 
            element when it captures keyboard focus. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.ForceCursor">
            <summary>
            Gets or sets a value that indicates whether this FrameworkElement should force 
            the user interface (UI) to render the cursor as declared by the Cursor property. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.OverridesDefaultStyle">
            <summary>
            Gets or sets a value that indicates whether this element incorporates style 
            properties from theme styles.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.RenderTransformOrigin">
            <summary>
            Gets or sets the center point of any possible render transform declared by 
            RenderTransform, relative to the bounds of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCanvas.Resources">
            <summary>
            Gets or sets the locally-defined resource dictionary.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartPane.#ctor(Infragistics.Windows.Chart.Chart)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartPane.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a Canvas in anticipation of arranging 
            them during the ArrangeOverride pass. 
            </summary>
            <param name="availableSize">An upper limit Size that should not be exceeded.</param>
            <returns>A Size that represents the size that is required to arrange child content.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartPane.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a Canvas element.
            </summary>
            <param name="arrangeSize">The size that this Canvas element should use to arrange its child elements.</param>
            <returns>A Size that represents the arranged size of this Canvas element and its descendants.</returns>
        </member>
        <member name="T:Infragistics.Windows.Chart.ErrorString">
            <summary>
            This class is temporary! All error messages should be located in resource file. Because of 
            problem with obfuscation error messages are temporary located in this class.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.GdiGraphics">
            <summary>
            This class is used for fast 2D rendering. It encapsulates GDI+ Graphics. 
            If data points are drawn using WPF rendering engine (FrameworkElements or 
            DrawingContext), drawing is very slow, especially for big number of data points. 
            So the solution is to use GDI+ drawing for big number of data points. Disadvantage 
            of this approach is that some of WPF features will not work (Animation, DataTemplates, etc.) 
            This rendering is used only for GridArea and all other chart elements (Axis Labels, Legend, etc) 
            are drawn using WPF rendering. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.SetSmoothingMode(System.Boolean)">
            <summary>
            Sets the rendering quality for this Graphics.
            </summary>
            <param name="smoothing">True if Anti Alias is on</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.#ctor(System.Double,System.Double,System.Windows.Media.Brush,Infragistics.Windows.Chart.Chart)">
            <summary>
            Creates GDI+ Graphics object from a bitmap.
            </summary>
            <param name="width">The bitmap width</param>
            <param name="height">The bitmap height</param>
            <param name="brush">The background brush</param>
            <param name="chart">The Chart</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.CreateImageBrush">
            <summary>
            Creates WPF image brush from GDI+ bitmap which is used for Graphics drawing.
            </summary>
            <returns>WPF image brush.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.SetGdiPen(System.Int32,System.Int32,Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Because of performance with gdi+ drawing, the Pen per series can be created only once.
            </summary>
            <param name="srsIndx">Series index</param>
            <param name="pointIndex">Data Point index</param>
            <param name="point">Data point</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.SetGdiLinePen(System.Int32,System.Int32,Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Because of performance with gdi+ drawing, the Pen per series can be created only once.
            </summary>
            <param name="srsIndx">Series index</param>
            <param name="pointIndex">Data Point index</param>
            <param name="point">Data point</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.SetGdiBrush(System.Int32,System.Int32,Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Because of performance with gdi+ drawing, the Brush per series can be created only once.
            </summary>
            <param name="srsIndx">Series index</param>
            <param name="pointIndex">Data Point index</param>
            <param name="point">Data point</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.FindSeriesIndex(Infragistics.Windows.Chart.Series)">
            <summary>
            Find index from series
            </summary>
            <param name="series">Data Series</param>
            <returns>Series Index</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.DrawLine(System.Windows.Media.Pen,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a line connecting two Point structures.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the line.</param>
            <param name="point1">Point structure that represents the first point to connect</param>
            <param name="point2">Point structure that represents the second point to connect.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.DrawLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a line connecting the two points specified by the coordinate pairs.
            </summary>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the second point.</param>
            <param name="y2">The y-coordinate of the second point.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.DrawLine(System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a line connecting two Point structures.
            </summary>
            <param name="point1">Point structure that represents the first point to connect</param>
            <param name="point2">Point structure that represents the second point to connect.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.DrawRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle with the specified Brush and Pen.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">Width of the rectangle to draw.</param>
            <param name="height">Height of the rectangle to draw.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.DrawEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an ellipse with the specified Brush and Pen.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle to draw.</param>
            <param name="width">Width of the bounding rectangle to draw.</param>
            <param name="height">Height of the bounding rectangle to draw.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.DrawPolygon(System.Windows.Point[])">
            <summary>
            Draws and fill a polygon defined by an array of Point structures.
            </summary>
            <param name="points">Array of Point structures that represent the vertices of the polygon.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.GetBoundingRect(System.Windows.Point[])">
            <summary>
            Gets the bounding rectangle from polygon points.
            </summary>
            <param name="points">Polygon points</param>
            <returns>Bounding rectangle</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.DrawRectangle(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Rect)">
            <summary>
            Draws a rectangle with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush with which to fill the rectangle.</param>
            <param name="pen">The pen with which to stroke the rectangle.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.GetPoints(System.Windows.Point[])">
            <summary>
            Converts WPF Point structures to System.Drawing PointF structures.
            </summary>
            <param name="points">An array of WPF Point structures</param>
            <returns>An array of System.Drawing PointF structures</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.AddHitTestRegionPolygon(System.Windows.Point[],System.Int32,System.Int32)">
            <summary>
            Creates a graphics path as a hit test region from polygon.
            </summary>
            <param name="points">Array of Point structures that represent the vertices of the polygon.</param>
            <param name="seriesIndex">Data series index</param>
            <param name="dataPointIndex">Data point index</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.AddHitTestRegionRectangle(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a graphics path as a hit test region from rectangle.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">Width of the rectangle to draw.</param>
            <param name="height">Height of the rectangle to draw.</param>
            <param name="seriesIndex">Data series index</param>
            <param name="dataPointIndex">Data point index</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.AddHitTestRegionEllipse(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a graphics path as a hit test region from ellipse.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <param name="seriesIndex">Data series index</param>
            <param name="dataPointIndex">Data point index</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.AddHitTestRegionLine(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a graphics path as a hit test region from line.
            </summary>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the second point.</param>
            <param name="y2">The y-coordinate of the second point.</param>
            <param name="seriesIndex">Data series index</param>
            <param name="dataPointIndex">Data point index</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.GetPen(System.Windows.Media.Pen)">
            <summary>
            Converts WPF Pen to GDI+ Pen.
            </summary>
            <param name="pen">WPF Pen</param>
            <returns>GDI+ Pen</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.GetBrush(System.Windows.Media.Brush)">
            <summary>
            Converts WPF Brush to GDI+ Brush.
            </summary>
            <param name="brush">WPF Brush</param>
            <returns>GDI+ Brush</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.GetBrush(System.Windows.Media.Brush,System.Drawing.RectangleF)">
            <summary>
            Converts WPF Brush to GDI+ Brush.
            </summary>
            <param name="brush">WPF Brush</param>
            <param name="rect">Rectangle of the area which should be filled with brush</param>
            <returns>GDI+ Brush</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.GetGradientAngle(System.Windows.Media.LinearGradientBrush)">
            <summary>
            Calculate angle for linear brush from start and end points.
            </summary>
            <param name="brush">WPF brush</param>
            <returns>Angle</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.SortColorBlend(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Sort positions because of error in Interpolation colors and non compatible brushes between GDI+ and wpf.
            </summary>
            <param name="blend">Color Blend</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.GetPoint(System.Windows.Point)">
            <summary>
            Returns gdi point from wpf point
            </summary>
            <param name="point">wpf point</param>
            <returns>gdi point</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.GetColor(System.Windows.Media.Color)">
            <summary>
            Converts WPF Color to GDI+ Color.
            </summary>
            <param name="color">WPF Color</param>
            <returns>GDI+ Color</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.GdiGraphics.Dispose">
            <summary>
            Releases all resources used by this GdiGraphics.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.LabelOrientation">
            <summary>
            Internal enumeration used to describe labels orientation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Space3DAxis">
            <summary>
            Axis used in 3D space. Not same as Axis enum
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Space3DAxis.X">
            <summary>
            X Axis
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Space3DAxis.Y">
            <summary>
            Y Axis
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Space3DAxis.Z">
            <summary>
            Z Axis
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Space3DPlane">
            <summary>
            Planes used in 3D space.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Space3DPlane.XY">
            <summary>
            XY Plane
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Space3DPlane.XZ">
            <summary>
            XZ Plane
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Space3DPlane.YZ">
            <summary>
            YZ Plane
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartTypeAttribute">
            <summary>
            Specifies internal parameters for chart types
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.SceneType">
            <summary>
            Specifies the scene type which are used to create different axes 
            for the scene.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.#ctor(Infragistics.Windows.Chart.Chart,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="is3D">True if the scene contains 3D charts</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.GetContainer">
            <summary>
            Gets the XamChart or the Chart
            </summary>
            <returns>The IChart Interface</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            When overridden in a derived class, participates in rendering operations 
            that are directed by the layout system. This method is invoked after layout 
            update, and before rendering, if the element's RenderSize has changed as a 
            result of layout update. 
            </summary>
            <param name="sizeInfo">The packaged parameters (SizeChangedInfo), which includes old and new sizes, and which dimension actually changes.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.Draw">
            <summary>
            Repaints the chart and draws exception as the text if an exception is raised.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.DrawWithException">
            <summary>
            Draws the chart without drawing exception
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.Create2DScene">
            <summary>
            Creates the scene for 2D charts
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.CheckIncompatibleChartTypes">
            <summary>
            xamChart can combine different chart types on the same scene, but some 
            chart types cannot be combined. This method checks if chart types which 
            belong to this scene can be combined.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.CreateAxisLabels2D">
            <summary>
            Create axis and axis labels for 2D charts 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.FindSceneType(Infragistics.Windows.Chart.ChartType[])">
            <summary>
            Find Scene Type from series and chart types.
            </summary>
            <param name="chartTypes">A list of chart types used on the scene</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.CreateChartSeries(Infragistics.Windows.Chart.ChartType)">
            <summary>
            Create chart series from chart types.
            </summary>
            <param name="type">Chart type</param>
            <returns>New chart series</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.GetAbsoluteX(System.Double)">
            <summary>
            Returns absolute position of the chart. By default 
            relative values are used from 0 to 100.
            </summary>
            <param name="value">Relative X position</param>
            <returns>Absolute X position</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.GetAbsoluteY(System.Double)">
            <summary>
            Returns absolute position of the chart. By default 
            relative values are used from 0 to 100.
            </summary>
            <param name="value">Relative Y position</param>
            <returns>Absolute Y position</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a Canvas in anticipation of arranging 
            them during the ArrangeOverride pass. 
            </summary>
            <param name="availableSize">An upper limit Size that should not be exceeded.</param>
            <returns>A Size that represents the size that is required to arrange child content.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ScenePane.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a Canvas element.
            </summary>
            <param name="arrangeSize">The size that this Canvas element should use to arrange its child elements.</param>
            <returns>A Size that represents the arranged size of this Canvas element and its descendants.</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScenePane.ChartCreator">
            <summary>
            Gets Chart creator
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScenePane.AxisX">
            <summary>
            Gets primary X axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScenePane.AxisY">
            <summary>
            Gets primary Y axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScenePane.AxisZ">
            <summary>
            Gets primary Z axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScenePane.AxisX2">
            <summary>
            Gets secondary X axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScenePane.AxisY2">
            <summary>
            Gets secondary Y axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScenePane.FinalSize">
            <summary>
            Returns final size
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScenePane.PlottingPane3D">
            <summary>
            Gets the Canvas which is used to plot 3D charts
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ScenePane.PlottingPane2D">
            <summary>
            Gets the Canvas which is used to plot 2D charts
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Animation">
            <summary>
            Animates a chart element using linear interpolation 
            over a specified Duration. 
            </summary>
            <remarks>
            There are two ways how animation could be used with XamChart. The first way is to use WPF animation which is supported 
            as Transformation animation, Brush animation, etc. The second way is to use Animation class which is part of 
            Infragistics.Windows.Chart namespace. This animation is used for some complex cases where WPF animation cannot be used. 
            This animation is implemented inside chart control.
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartFrameworkContentElement">
            <summary>
            This class hides public properties from FrameworkContentElement. FrameworkContentElement is the 
            Windows Presentation Foundation framework-level implementation of the ContentElement base class. 
            FrameworkContentElement adds support for additional input APIs (including tooltips and context menus), 
            animation, data context for databinding, and logical tree helper APIs. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartFrameworkContentElement.#ctor">
            <summary>
            Initializes a new instance of the ChartFrameworkContentElement class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartFrameworkContentElement.RaiseEvent(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Raises a specific routed event. The RoutedEvent to be raised is identified 
            within the RoutedEventArgs instance that is provided (as the RoutedEvent 
            property of that event data). 
            </summary>
            <param name="sender">Sender</param>
            <param name="e">A RoutedEventArgs that contains the event data and also identifies the event to raise.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartFrameworkContentElement.AddChild(System.Object)">
            <summary>
            Adds the provided element as a child of this element. 
            </summary>
            <param name="child">Child element to be added.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.AllowDrop">
            <summary>
            Gets or sets a value indicating whether this element 
            can be used as the target of a drag-and-drop operation. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.ContextMenu">
            <summary>
            Gets or sets the context menu element that should appear 
            whenever the context menu is requested through user 
            interface (UI) from within this element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.Tag">
            <summary>
            Gets or sets an arbitrary object value that can be used to 
            store custom information about this element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.Resources">
            <summary>
            Gets or sets the locally-defined resource dictionary.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.DataContext">
            <summary>
            Gets or sets the data context for an element when it participates in data binding.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.InputScope">
            <summary>
            Gets or sets the context for input used by this FrameworkElement. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this element is enabled in the user interface (UI).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.Language">
            <summary>
            Gets or sets localization/globalization language information that applies to an individual element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.CommandBindings">
            <summary>
            Gets a collection of CommandBinding objects that are associated with this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.OverridesDefaultStyle">
            <summary>
            Gets or sets a value that indicates whether this element incorporates style 
            properties from theme styles.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.ForceCursor">
            <summary>
            Gets or sets a value that indicates whether this FrameworkElement should force 
            the user interface (UI) to render the cursor as declared by the Cursor property. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.FocusVisualStyle">
            <summary>
            Gets or sets a property that enables customization of appearance, 
            effects, or other style characteristics that will apply to this 
            element when it captures keyboard focus. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.Cursor">
            <summary>
            Gets or sets the cursor that displays when the mouse pointer is over this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.Focusable">
            <summary>
            Gets or sets a value that indicates whether the element can receive focus. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkContentElement.ToolTip">
            <summary>
            Gets or sets the tool-tip object that is displayed for this element in the user interface (UI). 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Animation.#ctor">
            <summary>
            Initializes a new instance of the Animation class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Animation.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Animation.GetDoubleAnimation">
            <summary>
            Creates Double animation from Animation
            </summary>
            <returns>Double Animation</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Animation.BeginTimeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Animation.BeginTime"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Animation.DurationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Animation.Duration"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Animation.AccelerationRatioProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Animation.AccelerationRatio"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Animation.AccelerationRatioValidateCallback(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>true if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Animation.DecelerationRatioProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Animation.DecelerationRatio"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Animation.DecelerationRatioValidateCallback(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>true if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Animation.RepeatBehaviorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Animation.RepeatBehavior"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Animation.SequentialProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Animation.Sequential"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Animation.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Animation.BeginTime">
            <summary>
            Gets or sets the time at which this Timeline should begin.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Animation.BeginTimeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Animation.Duration">
            <summary>
            Gets or sets the length of time for which this timeline plays, not counting repetitions.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Animation.DurationProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Animation.AccelerationRatio">
            <summary>
            Gets or sets a value specifying the percentage of the timeline's Duration spent accelerating the passage of time from zero to its maximum rate.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Animation.DurationProperty"/>
            <remarks>
            A value between 0 and 1, inclusive, that specifies the percentage of the timeline's Duration spent accelerating the passage of time from zero to its maximum rate. If the timeline's DecelerationRatio property is also set, the sum of AccelerationRatio and DecelerationRatio must be less than or equal to 1. The default value is 0. 
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.Animation.DecelerationRatio">
            <summary>
            Gets or sets a value specifying the percentage of the timeline's Duration spent decelerating the passage of time from its maximum rate to zero.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Animation.DurationProperty"/>
            <remarks>
            A value between 0 and 1, inclusive, that specifies the percentage of the timeline's Duration spent decelerating the passage of time from its maximum rate to zero. If the timeline's AccelerationRatio property is also set, the sum of DecelerationRatio and AccelerationRatio must be less than or equal to 1. The default value is 0. 
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.Animation.RepeatBehavior">
            <summary>
            Gets or sets the repeating behavior of this timeline, either as an iteration Count or a repeat Duration.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Animation.DurationProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Animation.Sequential">
            <summary>
            Gets or sets a value indicating whether the sub elements are animated all together or sequentially. Used for series, gridlines and tickmarks.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Animation.DurationProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.Axis">
            <summary>
            Axis provides base set of properties and methods used for data range 
            calculation and visual presentation of axis line. Axis also contains 
            Gridlines, tickmarks and labels.
            </summary>
            <remarks>
            <p class="body">There are a few different ways how axis could be used and it depends on selected 
            chart type. For example, column chart display values on vertical axis and categories 
            on the horizontal axis. Bar chart uses horizontal axis for values and vertical for 
            categories. Scatter chart types use both horizontal and vertical axes for values. Some 
            chart types as doughnut or pie do not use axes.</p>    
            <p class="body">By default, the chart's axis does not exist in the Axes collection; however, 
            internally, default axes are created. If you don't want to modify the appearance 
            or range of the axes, grid lines, or axis labels, you can simply use the default 
            values of the axes. If you want to change the the default axis values, you need 
            to create an axis and add it to the Axes collection.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Chart.Axis.#ctor">
            <summary>
            Initializes a new instance of the Axis class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Axis.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.AxisTypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.AxisType"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.MaximumProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.Maximum"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.MinimumProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.Minimum"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.UnitProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.Unit"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Axis.AxisUnitValidateCallback(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>true if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.AutoRangeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.AutoRange"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.RangeFromZeroProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.RangeFromZero"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.LogarithmicProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.Logarithmic"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.LogarithmicBaseProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.LogarithmicBase"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Axis.OnLogarithmicBaseValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>true if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.CrossingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.Crossing"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.Stroke"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.AnimationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.Animation"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.MajorGridlineProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.MajorGridline"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.MinorGridlineProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.MinorGridline"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.MajorTickMarkProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.MajorTickMark"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.MinorTickMarkProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.MinorTickMark"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.LabelProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.Label"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.VisibleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.Visible"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Axis.NameProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Axis.Name"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.LogicalChildren">
            <summary>
            Gets an enumerator for this element's logical child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.AxisType">
            <summary>
            Gets or sets the axis type for this axis. This property is also used to enable secondary axes.
            </summary>
            <remarks>
            The axis type can be PrimaryX, PrimaryY, PrimaryZ, SecondaryX and SecondaryY. The default value is PrimaryX.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.AxisTypeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Maximum">
            <summary>
            Gets or sets the maximum limit of the Axis range. To create manual range <see cref="P:Infragistics.Windows.Chart.Axis.AutoRange"/> property has to be set to false and <see cref="P:Infragistics.Windows.Chart.Axis.Minimum"/>, Maximum and <see cref="P:Infragistics.Windows.Chart.Axis.Unit"/> have to be set.
            </summary>
            <remarks>
            If minimum or maximum value is NaN the axis range is automatically calculated. If Maximum is used on a category axis, the value is rounded to the smallest integer greater than or equal to the specified number. The default value is NaN.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.MaximumProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Minimum">
            <summary>
            Gets or sets the minimum limit of the Axis range. To create manual range <see cref="P:Infragistics.Windows.Chart.Axis.AutoRange"/> property has to be set to false and Minimum, <see cref="P:Infragistics.Windows.Chart.Axis.Maximum"/> and <see cref="P:Infragistics.Windows.Chart.Axis.Unit"/> have to be set.
            </summary>
            <remarks>
            If minimum or maximum value is NaN the axis range is automatically calculated. If Minimum is used on a category axis, the value is rounded to the smallest integer greater than or equal to the specified number. The default value is NaN.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.MinimumProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Unit">
            <summary>
            Gets or sets a distance between two neighboring axis labels, gridlines and tick marks. The Unit value uses axis scale. If the Unit is 0, Axis Unit is automatically calculated.
            </summary>
            <remarks>
            For logarithmic axes, the Unit value will represent interval of the linearlized scale. For example if <see cref="P:Infragistics.Windows.Chart.Axis.Minimum"/> and <see cref="P:Infragistics.Windows.Chart.Axis.Maximum"/> values are 10 and 10000 the linearlized minimum and maximum will be 1 and 4 (1=Log(10) and 4=Log(10000). If the Unit for this linearlized scale is 1 the axis will have 4 labels: 10, 100, 1000, 10000. The default value for Unit is 0.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.UnitProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.AutoRange">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Infragistics.Windows.Chart.Axis.Minimum"/>, <see cref="P:Infragistics.Windows.Chart.Axis.Maximum"/> and <see cref="P:Infragistics.Windows.Chart.Axis.Unit"/> are automatically calculated. To create manual range AutoRange property has to be set to false and Minimum, Maximum and Unit have to be set.
            </summary>
            <remarks>
            By default, chart determines the minimum and maximum range values of the axis. 
            You can customize the scale to better meet your needs. The default value for AutoRange is true.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.AutoRangeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.RangeFromZero">
            <summary>
            Gets or sets a value indicating whether the zero value is inside the auto range.
            </summary>
            <remarks>
            By default the chart control calculates minimum and maximum values for the axis. For non scatter chart types 0 value 
            will be inside the range defined by minimum and maximum values.  For example if data points have values: 
            112, 117 and 114 the auto minimum and maximum values will be 0 and 160. If RangeFromZero property is set 
            to �false� the auto minimum and maximum values will be: 110 and 118. The default value is true.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.RangeFromZeroProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Logarithmic">
            <summary>
            Gets or sets a value indicating whether the logarithmic scale is enabled.
            </summary>
            <remarks>
            The logarithm for a base b and a number x is defined to be the inverse function of 
            taking b to the power x. This property is used for value axes only (in most cases it 
            is Y axes, except scatter chart types which have all axes as a value axis). For category 
            axes this property is ignored (for no scatter chart types category axes are X and Z). The 
            default value is false.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.LogarithmicProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.LogarithmicBase">
            <summary>
            Gets or sets a base for logarithmic scale.
            </summary>
            <remarks>
            The logarithm for a base b and a number x is defined to be the inverse function of 
            taking b to the power x. The default value for LogarithmicBase is 10.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.LogarithmicBaseProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Crossing">
            <summary>
            Gets or sets an axis value where this axis crosses another axis.
            </summary>
            <remarks>
            The default value for Crossing is 0.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.CrossingProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the axis line.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.StrokeThickness">
            <summary>
            Gets or sets the width of the axis line.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.StrokeThicknessProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Animation">
            <summary>
            Gets or sets the animation for Axis line. This animation draws the line 
            from minimum to maximum axis position.
            </summary>
            <remarks>
            This animation is only used to create growing effect for the line, but Axis line animation could be 
            also created using brush property and WPF animation.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.AnimationProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.MajorGridline">
            <summary>
            Gets or sets the Major Gridline.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.MajorGridlineProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.MinorGridline">
            <summary>
            Gets or sets the Minor Gridline.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.MinorGridlineProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.MajorTickMark">
            <summary>
            Gets or sets the Major TickMark.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.MajorTickMarkProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.MinorTickMark">
            <summary>
            Gets or sets the Minor TickMark.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.MinorTickMarkProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Stripes">
            <summary>
            Gets the collection of stripes for this axis.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Label">
            <summary>
            Gets or sets the Axis Labels
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.LabelProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Visible">
            <summary>
            Gets or sets a value that indicates whether the axis is visible.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.VisibleProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Axis.Name">
            <summary>
            Gets or sets the Axis Name. Used for secondary Axes to make connection between Series and Axes.
            </summary>
            <remarks>
            Every series needs X and Y axes for 2D charts and X, Y and Z axes for 3D charts.  Every chart scene 
            can have 6 axes 3 Primary and 3 secondary. For example, series can use only one X axis, and it could 
            be primary or secondary.  To specify which axis we want to use we have to set the same text for AxisNameX 
            property of the Series and the Name property of an axis. If those properties are empty the primary axes are used.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Axis.NameProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.AxisCollection">
            <summary>
            Represent a data collection which containes axis objects.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisCollection.#ctor">
            <summary>
            Initializes a new instance of the AxisCollection class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisCollection.InsertItem(System.Int32,Infragistics.Windows.Chart.Axis)">
            <summary>
            Inserts an item into the collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments. 
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisCollection.IsAxisVisible(Infragistics.Windows.Chart.AxisType)">
            <summary>
            Checks if Axis are Visible. 
            </summary>
            <param name="type">Axis type</param>
            <returns>True if axis are visible</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisCollection.GetMark(Infragistics.Windows.Chart.AxisType,System.Boolean,System.Boolean)">
            <summary>
            Find Major/Minor Gridlines/tickmarks.
            </summary>
            <param name="type">Axis type</param>
            <param name="isGrid">True if grid is requested.</param>
            <param name="isMajor">True if major gridlines or tickmarks are reqested.</param>
            <returns>Reqested Mark</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisCollection.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsBase.SetFontSize(System.Double)">
            <summary>
            Sets font size for all labels
            </summary>
            <param name="fontSize">The new font size</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsBase.SetMaxTextWidth(System.Double)">
            <summary>
            Set maximum text width for all labels
            </summary>
            <param name="width">The new text width</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsBase.FindLongestLabel">
            <summary>
            Find the longest label
            </summary>
            <returns>The longest label index</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsBase.DrawTickMarks(System.Windows.Media.DrawingContext,Infragistics.Windows.Chart.AxisType,System.Boolean)">
            <summary>
            Draw tick lines with or without animation.
            </summary>
            <param name="dc">Drawing Context</param>
            <param name="axisType">Axis Type</param>
            <param name="major">True if major TickMarks are drawn.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsBase.GetLogarithmicMinorTickMarkIntervals(Infragistics.Windows.Chart.AxisValue,System.Double)">
             <summary>
             Gets the minor tick marks intervals.
             
             Note: Major TickMark is the one at integral powers, "|"
             Minor are the one in-between major, "+"
            
             |----+---+--+-++|----+---+--+-++|----+---+--+-++|
             </summary>
             <param name="axisValue">The axis value.</param>
             <param name="interval">The interval.</param>
             <returns></returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.LeftAxisLabels">
            <summary>
            Gets or sets the value which indicates wheater the labels belong to the left axis.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.Visible">
            <summary>
            Gets or sets the value which indicates wheater the labels are visible.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.Width">
            <summary>
            Gets or sets Label area width
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.Height">
            <summary>
            Gets or sets Label area height
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.Positions">
            <summary>
            Gets or sets a collection of label positions.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.Axis">
            <summary>
            Gets or sets axis which contains this labels
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.Chart">
            <summary>
            Gets or sets the chart which contains this labels
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.ScenePane">
            <summary>
            Gets or sets the chart scene which contains this labels
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.Shift">
            <summary>
            Gets or sets the shift of the first label from the border of the label canvas. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.LabelDistance">
            <summary>
            Gets or sets the distance between axis and labels
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.MinimumFontSize">
            <summary>
            Gets or sets the minimum font Size for automatic labels. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisLabelsBase.TopAxisLabels">
            <summary>
            Gets or sets the value which indicates wheater the labels belong to the top axis.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.AxisLabelsHorizontal">
            <summary>
            This class is used to draw labels and to automatically recalculate 
            the best orientation, angle and font size for labels. This class 
            is used for top and down axes labels only. Label angle and/or font size 
            can be set to auto values. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsHorizontal.Draw(System.Windows.Media.DrawingContext)">
            <summary>
            This method draws axis labels and calculate size and orientation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsHorizontal.AutoLabels(System.Double@,System.Double@,System.Double@)">
            <summary>
            This method calculates automatic axis angle, font size and maximum text size.
            </summary>
            <param name="autoAngle">Automatic axis angle</param>
            <param name="autoFontSize">Auto font size</param>
            <param name="maxWidth">Maximum text size</param>
            <returns>Auto label orientation which is the best match for specified label text and font size</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsHorizontal.HorizontalPosition(System.Double@,System.Double@)">
            <summary>
            This method calculates the best font size for horizontal labels 
            and checks if horizontal labels are possible without overlaping 
            and with minimum font size.
            </summary>
            <param name="autoAngle">Auto angle</param>
            <param name="autoFontSize">Auto font size</param>
            <returns>True if labels can be horizontal without overlaping</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsHorizontal.VerticalPosition(System.Double@,System.Double@)">
            <summary>
            This method calculates the best font size for vertical labels 
            and checks if vertical labels are possible without overlaping 
            and with minimum font size.
            </summary>
            <param name="autoAngle">Auto angle</param>
            <param name="autoFontSize">Auto font size</param>
            <returns>True if labels can be vertical without overlaping</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsHorizontal.DiagonalPosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            This method calculates the best font size for diagonal labels 
            and checks if diagonal labels are possible without overlaping 
            and with minimum font size.
            </summary>
            <param name="autoAngle">Auto angle</param>
            <param name="autoFontSize">Auto font size</param>
            <param name="maxWidth">Maximum text size</param>
            <returns>True if labels can be diagonal without overlaping</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsHorizontal.IsLeftOrientation">
            <summary>
            Find if the labels orientation is left or right. It depends on 
            the space between the first label, the last label and 
            the border rectangle.
            </summary>
            <returns>True if the labels are left oriented</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsHorizontal.CalculateHorizontalHeight(System.Double@)">
            <summary>
            This method calculates the best vertical size for horizontal 
            labels and prevents labels overlaping with bounding rectangle.
            </summary>
            <param name="autoFontSize"></param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsHorizontal.LabelsOverlaping(System.Double,System.Double@)">
            <summary>
            Checks if vertical labels overlap and calculates the best font size 
            to avoid overlaping.
            </summary>
            <param name="labelsAngle">The label font size</param>
            <param name="autoFontSize">The best font size</param>
            <returns>True if labels overlap</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsVertical.Draw(System.Windows.Media.DrawingContext)">
            <summary>
            This method draws axis labels and calculate size and orientation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsVertical.AutoLabels(System.Double@,System.Double@,System.Double@)">
            <summary>
            This method calculates automatic axis angle, font size and maximum text size.
            </summary>
            <param name="autoAngle">Automatic axis angle</param>
            <param name="autoFontSize">Auto font size</param>
            <param name="maxWidth">Maximum text size</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsVertical.HorizontalPosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            This method calculates the best font size for horizontal labels 
            and checks if horizontal labels are possible without overlaping 
            and with minimum font size.
            </summary>
            <param name="autoAngle">Auto angle</param>
            <param name="autoFontSize">Auto font size</param>
            <param name="maxWidth">Maximum text size</param>
            <returns>True if labels can be horizontal without overlaping</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisLabelsVertical.LabelsOverlaping(System.Double,System.Double@)">
            <summary>
            Checks if horizontal labels overlap and calculates the best font size 
            to avoid overlaping.
            </summary>
            <param name="labelsAngle">The label font size</param>
            <param name="autoFontSize">The best font size</param>
            <returns>True if labels overlap</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.LabelsFromPointExist">
            <summary>
            This method checks if label properties are set for data points. Otherwise 
            data point indexes are used for labels. Used for category axes only.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.Calculate">
            <summary>
            This method sets range for axes. It will set calculate minimum, 
            maximum and/or unit (interval) if auto range is used. Calculation 
            is based on data point values.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.CalculateRounding(System.Double@,System.Double@)">
            <summary>
            This method rounds minimum and maximum values to 
            the most significant digits.
            </summary>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.SetRoundValues(System.Double,System.Double)">
            <summary>
            This method is used to set the rounded values for minimum and maximum for 
            logarithmic and no logarithmic axes.
            </summary>
            <param name="min">Minimum value</param>
            <param name="max">Maximum Value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.CrossingCorrection">
            <summary>
            Crossing value has to be between minimum and maximum
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.ValuesFromSeries(System.Double@,System.Double@)">
            <summary>
            Find minimum and maximum values from data series
            </summary>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.FindMinMax(System.Double@,System.Double@)">
            <summary>
            Find minimum and maximum values from series.
            </summary>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.FindScatterMinMax(System.Double@,System.Double@)">
            <summary>
            Finds minimum and maximum values from series using 
            a scatter chart type.
            </summary>
            <param name="min">Current Minimum value</param>
            <param name="max">Current Maximum value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.FindBubbleMinMax(System.Double@,System.Double@)">
            <summary>
            Finds minimum and maximum values from series using 
            a bubble chart type.
            </summary>
            <param name="min">Current Minimum value</param>
            <param name="max">Current Maximum value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.FindStockMinMax(System.Double@,System.Double@)">
            <summary>
            Finds minimum and maximum values from series using 
            a stock chart types.
            </summary>
            <param name="min">Current Minimum value</param>
            <param name="max">Current Maximum value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.FindStackedMinMax(System.Double@,System.Double@,Infragistics.Windows.Chart.ChartType)">
            <summary>
            Finds minimum and maximum values from series using 
            a stacked chart type. Series are grouped by chart type. 
            </summary>
            <param name="min">Current Minimum value</param>
            <param name="max">Current Maximum value</param>
            <param name="type">Chart type (stacked)</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.FindStacked100MinMax(System.Double@,System.Double@)">
            <summary>
            Finds minimum and maximum values from series using 
            a 100% stacked chart type. Series are grouped by chart type. 
            </summary>
            <param name="min">Current Minimum value</param>
            <param name="max">Current Maximum value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.AxisValue.GetNumberOfZRows(Infragistics.Windows.Chart.SeriesCollection)">
            <summary>
            Calculates the number of Z position for 3D charts. Stacked chart 
            types are grouped together by Z value.
            </summary>
            <param name="seriesList">The array of series</param>
            <returns>The number of Z positions</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisValue.IsDateTime">
            <summary>
            Gets the value which indicates that the double value is date type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisValue.MaxNumberOfLabels">
            <summary>
            Gets the maximum number of labels for category axes before Unit 
            value is changed from value 1.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AxisValue.Scene3DSize">
            <summary>
            The depth of the 3D scene
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Caption">
            <summary>
            This class keeps information about text value, font, color and 
            position for a Chart Control title.
            </summary>
            <remarks>
            The chart title position is calculated automatically, but the title could 
            be positioned manually using Position property.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Chart.Caption.#ctor">
            <summary>
            Initializes a new instance of the Caption class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Caption.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.TextProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.Text"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.MarginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.Margin"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.MarginTypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.MarginType"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.FontFamilyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.FontFamily"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.FontSizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.FontSize"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Caption.OnFontSizeValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.FontStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.FontStyle"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.FontWeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.FontWeight"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.FontStretchProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.FontStretch"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.ForegroundProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.Foreground"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.BackgroundProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.Background"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.BorderBrushProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.BorderBrush"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Caption.BorderThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Caption.BorderThickness"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Caption.OnBorderThicknessValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.Text">
            <summary>
            Gets or sets the text contents of a Caption. 
            </summary>
            <remarks>
            A string specifying the content of the Caption. The default value is Empty. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.TextProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.Margin">
            <summary>
            Gets or sets the outer margin of an element using percent value from 0 to 100. This property doesn't have any effect if MarginType property is set to �Auto�.
            </summary>
            <remarks>
            The property uses percent as an unit, which means that the values for the left, top, right, and bottom of the bounding rectangle have to be values between 0 and 100. This relative layout will produce proportional resizing of the chart elements.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.MarginProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.MarginType">
            <summary>
            Gets or sets a margin type for the chart element. If MarginType property is �Percent�, the Margin property has to be set.
            </summary>
            <remarks>
            The margin type can be set to Auto or Percent. The default value is Auto, and the position of the chart element is automatically created. For manual positioning the MarginType has to be set to Percent.  
            </remarks>
            <seealso cref="P:Infragistics.Windows.Chart.Caption.Margin"/>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.MarginTypeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.FontFamily">
            <summary>
            Gets or sets the name of the specified font.
            </summary>
            <remarks>
            A FontFamily object specifying prefered font family. If font doesn�t exist, there is one or more fallback font families. The default value is the font determined by the MessageFontFamily metric. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.FontFamilyProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.FontSize">
            <summary>
            Gets or sets the font size of the caption text.
            </summary>
            <remarks>
            A double value specifying the desired font size to use in points (1 point = 1/72 of an inch = 96/72 device independent pixels). The default value is determined by the MessageFontSize metric.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.FontSizeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.FontStyle">
            <summary>
            Gets or sets the font style for the caption text.
            </summary>
            <remarks>
            The default value for FontStyle is Normal.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.FontStyleProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.FontWeight">
            <summary>
            Gets or sets the weight or thickness of the specified font.
            </summary>
            <remarks>
            A FontWeight enumeration value. The default value is Normal. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.FontWeightProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.FontStretch">
            <summary>
            Gets or sets the degree to which a font is condensed or expanded on the screen.
            </summary>
            <remarks>
            A member of the FontStretch class specifying the desired font-stretching characteristics to use. The default value is Normal.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.FontStretchProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.Foreground">
            <summary>
            Gets or sets the Brush to apply to the text contents of the caption.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.ForegroundProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.Background">
            <summary>
            Gets or sets the Brush that specifies how to paint the interior of the caption. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.BackgroundProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.BorderBrush">
            <summary>
            Gets or sets the Brush that draws the outer border color. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.BorderBrushProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Caption.BorderThickness">
            <summary>
            Gets or sets the border thickness for the Caption Panel. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Caption.FontSizeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.CaptionPane.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartAssemblyResourceSetLoader">
            <summary>
            Loads the themes contained in this assembly.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartAssemblyResourceSetLoader.OnRegisterResourceSets(System.String)">
            <summary>
            Loads and registers the resource sets
            </summary>
            <param name="groupingName">The name of the grouping whose resources should be loaded or null if all resource sets should be loaded.</param>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartParameter">
            <summary>
            Provides a base set of parameters for specific chart 
            types. This class is used to decrese number of public 
            properties used in series and data points.  Used for numerous 
            number of parameters which are different for every chart type.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.#ctor">
            <summary>
            Initializes a new instance of the ChartParameter class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.Validate(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Validate Chart parameter properties
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetBrush(System.Object,Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Returns value from object if possible.
            </summary>
            <param name="value">Chart parameter value as an object.</param>
            <param name="type">Chart parameter type</param>
            <returns>Returns value as strong type.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetAnimation(System.Object,Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Returns value from object if possible.
            </summary>
            <param name="value">Chart parameter value as an object.</param>
            <param name="type">Chart parameter type</param>
            <returns>Returns value as strong type.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetInt(System.Object,Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Returns value from object if possible.
            </summary>
            <param name="value">Chart parameter value as an object.</param>
            <param name="type">Chart parameter type</param>
            <returns>Returns value as strong type.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetBool(System.Object,Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Returns value from object if possible.
            </summary>
            <param name="value">Chart parameter value as an object.</param>
            <param name="type">Chart parameter type</param>
            <returns>Returns value as strong type.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetDouble(System.Object,Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Returns value from object if possible.
            </summary>
            <param name="value">Chart parameter value as an object.</param>
            <param name="type">Chart parameter type</param>
            <returns>Returns value as strong type.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetDouble(System.Object,Infragistics.Windows.Chart.ChartParameterType,System.Boolean@)">
            <summary>
            Returns value from object if possible.
            </summary>
            <param name="value">Chart parameter value as an object.</param>
            <param name="type">Chart parameter type</param>
            <param name="isDateTime">True if value is Date Time</param>
            <returns>Returns value as strong type.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetDefaultBrush">
            <summary>
            Returns value for chart parameters. If not set default value is returned
            </summary>
            <returns>Chart parameter value.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetDefaultAnimation">
            <summary>
            Returns value for chart parameters. If not set default value is returned
            </summary>
            <returns>Chart parameter value.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetDefaultInt">
            <summary>
            Returns value for chart parameters. If not set default value is returned
            </summary>
            <returns>Chart parameter value.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetDefaultBool">
            <summary>
            Returns value for chart parameters. If not set default value is returned.
            </summary>
            <returns>Chart parameter value.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetDefaultDouble">
            <summary>
            Returns value for chart parameters. If not set default value is returned.
            </summary>
            <returns>Chart parameter value.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameter.GetDefaultDouble(System.Boolean@)">
            <summary>
            Returns value for chart parameters. If not set default value is returned.
            </summary>
            <param name="isDateTime">True if value is Date Time</param>
            <returns>Chart parameter value.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameter.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.ChartParameter.Value"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameter.TypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.ChartParameter.Type"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartParameter.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartParameter.Value">
            <summary>
            Chart Parameter value.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.ChartParameter.ValueProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartParameter.Type">
            <summary>
            Chart Parameter Type
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.ChartParameter.TypeProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartParameterCollection">
            <summary>
            Represents a collection of chart parameters. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameterCollection.Add(Infragistics.Windows.Chart.ChartParameterType,System.Object)">
            <summary>
            Adds an item to the end of the collection. 
            </summary>
            <param name="type">Chart parameter type</param>
            <param name="value">Chart parameter value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the ChartParametersCollection class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameterCollection.InsertItem(System.Int32,Infragistics.Windows.Chart.ChartParameter)">
            <summary>
            Inserts an item into the collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartParameterCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments. 
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartParameterCollection.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartCreator">
            <summary>
            The ChartCreator is the internal class which is used to create 2D and 3D charts for the chart control.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartCreator.#ctor(Infragistics.Windows.Chart.Chart)">
            <summary>
            Constructor
            </summary>
            <param name="chart">Parent chart</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartCreator.Create2DChart">
            <summary>
            Creates 2D charts
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartCreator.Create3DChart">
            <summary>
            Creates 3D Chart
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.ChartCreator.GetContainer">
            <summary>
            Gets the XamChart or the Chart
            </summary>
            <returns>The IChart Interface</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCreator.Children">
            <summary>
            Gets the chart control children
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCreator.Scene">
            <summary>
            Gets the scene
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCreator.ActualHeight">
            <summary>
            Gets the actual height from the chart control.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCreator.AxisX">
            <summary>
            Gets or sets primary X axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCreator.AxisY">
            <summary>
            Gets or sets primary Y axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCreator.AxisZ">
            <summary>
            Gets or sets primary Z axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCreator.AxisX2">
            <summary>
            Gets or sets secondary X axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCreator.AxisY2">
            <summary>
            Gets or sets secondary Y axis
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCreator.ScenePane">
            <summary>
            Gets Legend Pane
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartCreator.CaptionPane">
            <summary>
            Gets Caption Pane
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.Width">
            <summary>
            Gets or sets the width of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.Height">
            <summary>
            Gets or sets the suggested height of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment characteristics applied 
            to this element when it is composed within a parent element, 
            such as a panel or items control. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment characteristics applied to 
            this element when it is composed within a parent element such as 
            a panel or items control. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.Margin">
            <summary>
            Gets or sets the outer margin of an element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.Opacity">
            <summary>
            Gets or sets the opacity factor applied to the entire UIElement 
            when it is rendered in the user interface (UI). 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.OpacityMask">
            <summary>
            Gets or sets an opacity mask, as a Brush implementation that is 
            applied to any alpha-channel masking for the rendered content 
            of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.ClipToBounds">
            <summary>
            Gets or sets a value indicating whether to clip the content 
            of this element (or content coming from the child elements of 
            this element) to fit into the size of the containing element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.SnapsToDevicePixels">
            <summary>
            Gets or sets a value that determines whether rendering for this element 
            should use device-specific pixel settings during rendering. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.AllowDrop">
            <summary>
            Gets or sets a value indicating whether this element 
            can be used as the target of a drag-and-drop operation. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.BitmapEffect">
            <summary>
            Gets or sets a bitmap effect that applies directly to the rendered content for this element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.BitmapEffectInput">
            <summary>
            Gets or sets an input source for the bitmap effect that 
            applies directly to the rendered content for this element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.Clip">
            <summary>
            Gets or sets the geometry used to define the outline of 
            the contents of an element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.ContextMenu">
            <summary>
            Gets or sets the context menu element that should appear 
            whenever the context menu is requested through user 
            interface (UI) from within this element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.RenderTransform">
            <summary>
            Gets or sets transform information that affects the rendering 
            position of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.LayoutTransform">
            <summary>
            Gets or sets a graphics transformation that should apply to this 
            element when layout is performed. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.MaxHeight">
            <summary>
            Gets or sets the maximum height constraint of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.MaxWidth">
            <summary>
            Gets or sets the maximum width constraint of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.MinHeight">
            <summary>
            Gets or sets the minimum height constraint of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.MinWidth">
            <summary>
            Gets or sets the minimum width constraint of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.Visibility">
            <summary>
            Gets or sets the user interface (UI) visibility of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.Cursor">
            <summary>
            Gets or sets the cursor that displays when the mouse pointer is over this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.DataContext">
            <summary>
            Gets or sets the data context for an element when it participates in data binding.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this element is enabled in the user interface (UI).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.ToolTip">
            <summary>
            Gets or sets the tool-tip object that is displayed for this element in the user interface (UI). 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.Focusable">
            <summary>
            Gets or sets a value that indicates whether the element can receive focus. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.IsHitTestVisible">
            <summary>
            Gets or sets a value that declares whether this element can possibly be 
            returned as a hit test result from some portion of its rendered content.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.Tag">
            <summary>
            Gets or sets an arbitrary object value that can be used to 
            store custom information about this element. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.FocusVisualStyle">
            <summary>
            Gets or sets a property that enables customization of appearance, 
            effects, or other style characteristics that will apply to this 
            element when it captures keyboard focus. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.ForceCursor">
            <summary>
            Gets or sets a value that indicates whether this FrameworkElement should force 
            the user interface (UI) to render the cursor as declared by the Cursor property. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.InputScope">
            <summary>
            Gets or sets the context for input used by this FrameworkElement. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.OverridesDefaultStyle">
            <summary>
            Gets or sets a value that indicates whether this element incorporates style 
            properties from theme styles.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.RenderTransformOrigin">
            <summary>
            Gets or sets the center point of any possible render transform declared by 
            RenderTransform, relative to the bounds of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ChartFrameworkElement.Resources">
            <summary>
            Gets or sets the locally-defined resource dictionary.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.DoubleToCornerRadiusConverter">
            <summary>
            Converts Double to CornerRadius
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DoubleToCornerRadiusConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding source to the binding target. 
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DoubleToCornerRadiusConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding target to the binding source.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="T:Infragistics.Windows.Chart.DataPointTemplate">
            <summary>
            This class is used to create custom data point appearance using data templates. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPointTemplate.Fill">
            <summary>
            Gets or sets the Brush that specifies how to paint the interior of the shape. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPointTemplate.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPointTemplate.ToolTip">
            <summary>
            Gets or sets the tool-tip object that is displayed for this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPointTemplate.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ColumnChartTemplate">
            <summary>
            This class is used to create custom data point appearance using data templates. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ColumnChartTemplate.IsNegative">
            <summary>
            Gets or sets a value that indicates whether the data point value is negative.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ColumnChartTemplate.RectangleRounding">
            <summary>
            Gets or sets radius of the ellipse that is used to round the corners of the 
            rectangle. Used for 2D chart which data point shape is rectangle (Column, Bar, 
            Stacked Column, Candlestick, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ColumnChartTemplate.CornerRadius">
            <summary>
            Gets or sets radius of the ellipse that is used to round the corners of the 
            rectangle. Used for 2D chart which data point shape is rectangle (Column, Bar, 
            Stacked Column, Candlestick, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.ColumnChartTemplate.BorderThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.BarChartTemplate">
            <summary>
            This class is used to create custom data point appearance using data templates. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BarChartTemplate.IsNegative">
            <summary>
            Gets or sets a value that indicates whether the data point value is negative.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BarChartTemplate.RectangleRounding">
            <summary>
            Gets or sets radius of the ellipse that is used to round the corners of the 
            rectangle. Used for 2D chart which data point shape is rectangle (Column, Bar, 
            Stacked Column, Candlestick, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BarChartTemplate.CornerRadius">
            <summary>
            Gets or sets radius of the ellipse that is used to round the corners of the 
            rectangle. Used for 2D chart which data point shape is rectangle (Column, Bar, 
            Stacked Column, Candlestick, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.BarChartTemplate.BorderThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.AreaChartTemplate">
            <summary>
            This class is used to create custom data point appearance using data templates. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AreaChartTemplate.Point1">
            <summary>
            The 1. area point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AreaChartTemplate.Point2">
            <summary>
            The 2. area point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AreaChartTemplate.Point3">
            <summary>
            The 3. area point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.AreaChartTemplate.Point4">
            <summary>
            The 4. area point.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.LineChartTemplate">
            <summary>
            This class is used to create custom data point appearance using data templates. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LineChartTemplate.Point1">
            <summary>
            The 1. line point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LineChartTemplate.Point2">
            <summary>
            The 2. line point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LineChartTemplate.RegionPoint1">
            <summary>
            The region line 1. point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LineChartTemplate.RegionPoint2">
            <summary>
            The region line 2. point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LineChartTemplate.RegionPoint3">
            <summary>
            The region line 3. point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LineChartTemplate.RegionPoint4">
            <summary>
            The region line 4. point.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.BubbleChartTemplate">
            <summary>
            This class is used to create custom data point appearance using data templates. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.GridArea">
            <summary>
            Grid area is interior section of the scene. It is area where gridlines and data points 
            are drawn, but it exclude area with axis labels. Grid area exists only if 2D charts are used.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.GridArea.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this 
            FrameworkElement has been updated. The specific dependency property that changed 
            is reported in the arguments parameter. Overrides OnPropertyChanged. 
            </summary>
            <param name="e">Event arguments that describe the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.GridArea.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridArea.RefreshPointsOnlyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridArea.RefreshPointsOnly"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridArea.IsPieSceneProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridArea.IsPieScene"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridArea.MarginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridArea.Margin"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridArea.MarginTypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridArea.MarginType"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridArea.RenderingOptionsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridArea.RenderingOptions"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridArea.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridArea.PlottingPane2D">
            <summary>
            Gets or Sets the scene pane
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridArea.PlottingPane3D">
            <summary>
            Gets or Sets the scene pane
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridArea.RefreshPointsOnly">
            <summary>
            Gets or sets a value that indicates whether only data points are refreshed. Drawings of all other chart elements are disabled. Used to improve performance of data point animation.
            </summary>
            <remarks>
            Used for 2D charts only. The default value is false.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.GridArea.RefreshPointsOnlyProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridArea.IsPieScene">
            <summary>
            Gets or sets a value that indicates whether the scene is used to draw Pie or Doughnut chart.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.GridArea.IsPieSceneProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridArea.BorderThickness">
            <summary>
            Gets or sets a thickness that describes the border thickness of a control. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridArea.Margin">
            <summary>
            Gets or sets the outer margin of an element using percent value from 0 to 100. This property doesn't have any effect if MarginType property is set to �Auto�.
            </summary>
            <remarks>
            The property uses percent as an unit, which means that the values for the left, top, right, and bottom of the bounding rectangle have to be values between 0 and 100. This relative layout will produce proportional resizing of the chart elements.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.GridArea.MarginProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridArea.MarginType">
            <summary>
            Gets or sets a margin type for the chart element. If MarginType property is �Percent�, the Margin property has to be set.
            </summary>
            <remarks>
            The margin type can be set to Auto or Percent. The default value is Auto, and the position of the chart element is automatically created. For manual positioning the MarginType has to be set to Percent.  
            </remarks>
            <seealso cref="P:Infragistics.Windows.Chart.GridArea.Margin"/>
            <seealso cref="F:Infragistics.Windows.Chart.GridArea.MarginTypeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridArea.RenderingOptions">
            <summary>
            Gets grid area rendering options. Rendering options are used to improve rendering performance 
            for a big number of data points. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.GridArea.RenderingOptionsProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.GridAreaRenderingOptions">
            <summary>
            This class is used to keep rendering options. Rendering options are 
            used to improve rendering performance for a big number of data points.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridAreaRenderingOptions.RenderingModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridAreaRenderingOptions.RenderingMode"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridAreaRenderingOptions.RenderingDetailsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridAreaRenderingOptions.RenderingDetails"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.GridAreaRenderingOptions.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridAreaRenderingOptions.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridAreaRenderingOptions.RenderingMode">
            <summary>
            Gets or sets Rendering Mode. Rendering mode is used to improve rendering performance for a big number 
            of data points.  If the value is �Auto� Rendering mode depends on number of data 
            points. If the number of points is greater than 100 the performance mode is active. 
            When Performance mode is active, some wpf features are disabled (animation, backgrounds, 
            themes, data templates, etc). Auto is default value.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.GridAreaRenderingOptions.RenderingModeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridAreaRenderingOptions.RenderingDetails">
            <summary>
            Gets grid area rendering details. Rendering details are used to improve rendering performance 
            for a big number of data points. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.GridAreaRenderingOptions.RenderingDetailsProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.GridAreaRenderingDetails">
            <summary>
            This class is used to keep rendering details. Rendering details are 
            used to improve rendering performance for a big number of data points.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridAreaRenderingDetails.AntiAliasingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridAreaRenderingDetails.AntiAliasing"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridAreaRenderingDetails.ForceSolidBrushProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridAreaRenderingDetails.ForceSolidBrush"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridAreaRenderingDetails.AllowDataPointBrushProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridAreaRenderingDetails.AllowDataPointBrush"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.GridAreaRenderingDetails.AutoModePointsNumberProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.GridAreaRenderingDetails.AutoModePointsNumber"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.GridAreaRenderingDetails.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridAreaRenderingDetails.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridAreaRenderingDetails.AntiAliasing">
            <summary>
            Gets or sets the rendering quality for 'Performance' rendering mode.
            </summary>
            <remarks>
            By default AntiAliasing is set to false. The AntiAliasing specifies whether 
            lines, curves, and the edges of filled areas use smoothing (also called antialiasing).
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.GridAreaRenderingDetails.AntiAliasingProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridAreaRenderingDetails.ForceSolidBrush">
            <summary>
            Gets or sets Force Solid Brush. If the value is true only solid color brush 
            is used. This significantly improves performance and this is used only for 
            �Performance� rendering mode.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.GridAreaRenderingDetails.ForceSolidBrushProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridAreaRenderingDetails.AllowDataPointBrush">
            <summary>
            Gets or set a value which indicates whether data point brushes are used. For �Performance� mode, 
            by default, only series colors are used and all data points have same colors. This significantly 
            improves performance and memory usage.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.GridAreaRenderingDetails.ForceSolidBrushProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.GridAreaRenderingDetails.AutoModePointsNumber">
            <summary>
            Gets or sets auto mode points number. This number is used when Rendering Mode 
            is set to auto. The Performance mode is active when the number of data points 
            from all series is greater than AutoModePointsNumber. If number of points is 
            less then this number the rendering mode is �Full�. When rendering mode is 
            set to �Full� or �Performance� this number is ignored. Default value is 1000.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.GridAreaRenderingDetails.AutoModePointsNumberProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.Label">
            <summary>
            Label keeps information about axis label appearance and formatting. By default, 
            axis labels are positioned automatically and label collision algorithm is enabled. 
            </summary>
            <remarks>
            Axis label text is stored in the <see cref="P:Infragistics.Windows.Chart.DataPoint.Label"/> property of <see cref="P:Infragistics.Windows.Chart.Series.DataPoints"/>. 
            This class keeps information about Axis labels appearance only.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Chart.Label.#ctor">
            <summary>
            Initializes a new instance of the Label class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Label.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Label.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this 
            FrameworkElement has been updated. The specific dependency property that changed 
            is reported in the arguments parameter. Overrides OnPropertyChanged. 
            </summary>
            <param name="e">Event arguments that describe the property that changed, as well as old and new values.</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.FontFamilyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.FontFamily"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.FontSizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.FontSize"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Label.OnFontSizeValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.AngleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.Angle"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Label.OnAngleValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.FontStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.FontStyle"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.FontWeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.FontWeight"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.FontStretchProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.FontStretch"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.ForegroundProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.Foreground"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.FormatProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.Format"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.AutoResizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.AutoResize"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.DistanceFromAxisProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.DistanceFromAxis"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Label.OnDistanceFromAxisValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Label.VisibleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Label.Visible"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.FontFamily">
            <summary>
            Gets or sets the name of the specified font.
            </summary>
            <remarks>
            A FontFamily object specifying prefered font family. If font doesn�t exist, there is one or more fallback font families. The default value is the font determined by the MessageFontFamily metric. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Label.FontFamilyProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.FontSize">
            <summary>
            Gets or sets the font size of the axis labels.
            </summary>
            <remarks>
            A double value specifying the desired font size to use in points (1 point = 1/72 of an inch = 96/72 device independent pixels). The default value is determined by the MessageFontSize metric.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Label.FontSizeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.Angle">
            <summary>
            Gets or sets an angle of labels.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Label.AngleProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.FontStyle">
            <summary>
            Gets or sets the font style for axis labels.
            </summary>
            <remarks>
            The default value for FontStyle is Normal.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Label.FontStyleProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.FontWeight">
            <summary>
            Gets or sets the weight or thickness of the specified font.
            </summary>
            <remarks>
            A FontWeight enumeration value. The default value is Normal. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Label.FontWeightProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.FontStretch">
            <summary>
            Gets or sets the degree to which a font is condensed or expanded on the screen.
            </summary>
            <remarks>
            A member of the FontStretch class specifying the desired font-stretching characteristics to use. The default value is Normal.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Label.FontStretchProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.Foreground">
            <summary>
            Gets or sets the Brush to apply to the text contents of labels.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Label.ForegroundProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.Format">
            <summary>
            Gets or sets data point label format using the .NET Framework composite string formatting.
            </summary>
            <remarks>
            This property is used to format axis label string. Axis label should use axis label 
            value which will be formatted on specified way and inserted into a text. Axis label format uses 
            .NET Composite Formatting specification. The �{0}� text is replaced with axis label value. For 
            example, to create a label which displays a text �Label value is: 3� where 3 is axis label 
            value, we have to create a following format string �Label value is: {0}�. Few more examples: 
            1. �Product price is: $3.00 dollars� -&gt; �Product price is: {0:C} dollars�. 2. �Calculated value is: 
            03.00� -&gt; �Calculated value is: {0:00.00}�. For more information about format property see �Composite 
            Formatting� in .NET Framework Developer�s Guide. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Label.FormatProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.AutoResize">
            <summary>
            Gets or sets a value that indicates whether the axis labels have automatic font size.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Label.AutoResizeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.DistanceFromAxis">
            <summary>
            Gets or sets the distance between axis and labels. This is scaling factor applied to the default distance. Value 1 is default distance, a value between 0 and 1 decrease the default distance and a value greater than 1 increase the default distance. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Label.DistanceFromAxisProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Label.Visible">
            <summary>
            Gets or sets a value that indicates whether the axis labels are visible.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Label.VisibleProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.LegendItem">
            <summary>
            Represents an item in the legend with a rectangle and a text. By default legend items 
            are created from the <see cref="T:Infragistics.Windows.Chart.Series"/> or <see cref="T:Infragistics.Windows.Chart.DataPoint"/> <see cref="P:Infragistics.Windows.Chart.DataPoint.Label"/> property. This class 
            is used only if default legend item color or text has to be changed. 
            </summary>
            <remarks>
            The Legend item has a legend icon (Rectangle) on the left side which is created using <see cref="P:Infragistics.Windows.Chart.LegendItem.Fill"/>, <see cref="P:Infragistics.Windows.Chart.LegendItem.Stroke"/> and 
            <see cref="P:Infragistics.Windows.Chart.LegendItem.StrokeThickness"/>. Also the <see cref="P:Infragistics.Windows.Chart.LegendItem.Text"/> is placed on the right side of the legend item. There is possibility to 
            change the shape of the legend icon and legend item using <see cref="T:Infragistics.Windows.Chart.LegendItemTemplate"/>. The font appearance 
            properties are located at the <see cref="T:Infragistics.Windows.Chart.Legend"/> and they are used for all legend items. 
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Chart.LegendItem.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.LegendItem.FillProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.LegendItem.Fill"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.LegendItem.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.LegendItem.Stroke"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.LegendItem.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.LegendItem.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.LegendItem.TextProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.LegendItem.Text"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItem.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItem.Fill">
            <summary>
            Gets or sets the Brush that specifies how to paint the interior of the shape. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.LegendItem.FillProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItem.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.LegendItem.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItem.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.LegendItem.StrokeThicknessProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItem.Text">
            <summary>
            Gets or sets legend item text.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.LegendItem.TextProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.LegendItemCollection">
            <summary>
            Represents a collection of legend items. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.LegendItemCollection.#ctor">
            <summary>
            Initializes a new instance of the LegendItemCollection class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.LegendItemCollection.InsertItem(System.Int32,Infragistics.Windows.Chart.LegendItem)">
            <summary>
            Inserts an item into the collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.LegendItemCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments. 
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItemCollection.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.LegendItemTemplate">
            <summary>
            This class is used to create custom legend item appearance with data templates. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItemTemplate.Fill">
            <summary>
            Gets or sets the Brush that specifies how to paint the interior of the shape. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItemTemplate.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItemTemplate.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItemTemplate.Text">
            <summary>
            Gets or sets the text for legend item.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItemTemplate.Width">
            <summary>
            Gets or sets the legend item Width.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendItemTemplate.Height">
            <summary>
            Gets or sets the legend item Height.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.MarkerTemplate">
            <summary>
            This class is used to create custom marker appearance using data templates. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Resources">
            <summary>
            Exposes a <see cref="T:Infragistics.Shared.ResourceCustomizer"/> instance for this assembly. 
            </summary>
            <seealso cref="P:Infragistics.Windows.Chart.Resources.Customizer"/> 
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/> 
        </member>
        <member name="M:Infragistics.Windows.Chart.Resources.GetString(System.String,System.Object[])">
            <summary>
            Returns the resource string using the specified name and default culture.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Resources.GetString(System.String)">
            <summary>
            Returns the resource string using the specified resource name and default culture. The string is then formatted using the arguments specified.
            </summary>
            <param name="name">Name of the string resource to return.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Resources.GetDynamicResourceString(System.String)">
            <summary>
            Returns a DynamicResourceString object that tracks customization changes to a resource and raises an event when the resource value is changed.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <returns>A <see cref="T:Infragistics.Shared.DynamicResourceString"/> object to track changes in the resource customizations.</returns>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.Resources.GetDynamicResourceString(System.String,System.Object[])">
            <summary>
            Returns a DynamicResourceString object that tracks customization changes to a resource and raises an event when the resource value is changed.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
            <returns>A <see cref="T:Infragistics.Shared.DynamicResourceString"/> object to track changes in the resource customizations.</returns>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.Resources.GetDynamicResourceString(System.String,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Returns a DynamicResourceString object that tracks customization changes to a resource and raises an event when the resource value is changed.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
            <param name="culture">Culture whose resource should loaded. The resource will go through a fallback process to locate the appropriate resources.</param>
            <returns>A <see cref="T:Infragistics.Shared.DynamicResourceString"/> object to track changes in the resource customizations.</returns>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
        </member>
        <member name="M:Infragistics.Windows.Chart.Resources.GetObject(System.String)">
            <summary>
            Returns the resource object using the specified name.
            </summary>
            <param name="name">Name of the resource item</param>
            <returns>An object containing the specified resource</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.Resources.Customizer">
            <summary>
            Returns the <see cref="T:Infragistics.Shared.ResourceCustomizer"/> for this assembly.
            </summary>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/> 
        </member>
        <member name="T:Infragistics.Windows.Chart.Scene">
            <summary>
            This class contains information related to scene appearance. The chart scene 
            is different for 2D and 3D chart. For 2D chart it is used for Background color 
            and position. For 3D chart it also containes thicknes of the 3D scene.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene.#ctor">
            <summary>
            Initializes a new instance of the Scene class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this 
            FrameworkElement has been updated. The specific dependency property that changed 
            is reported in the arguments parameter. Overrides OnPropertyChanged. 
            </summary>
            <param name="e">Event arguments that describe the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.Scene.GridAreaProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Scene.GridArea"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Scene.Scene3DThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Scene.Scene3DThickness"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene.OnScene3DThicknessValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Scene.MarginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Scene.Margin"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Scene.MarginTypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Scene.MarginType"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Scene.PerspectiveProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Scene.Perspective"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene.OnPerspectiveValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Scene.Scene3DBrushProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Scene.Scene3DBrush"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Scene.DataFilterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Scene.DataFilter"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Scene.ContentControlPropertyChanging">
            <summary>
            On property changed called and active
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Scene.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Scene.ScenePane">
            <summary>
            Gets or Sets the scene pane
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Scene.GridArea">
            <summary>
            Gets or sets the GridArea which is the region inside the Scene which contains: DataPoints, Markers and gridlines. Axis Labels are drawn outside the GridArea. 3D chart do not have GridArea.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Scene.GridAreaProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Scene.Scene3DThickness">
            <summary>
            Gets or sets 3D Scene Thickness.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Scene.Scene3DThicknessProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Scene.Margin">
            <summary>
            Gets or sets the outer margin of an element using percent value from 0 to 100. This property doesn't have any effect if MarginType property is set to �Auto�.
            </summary>
            <remarks>
            The property uses percent as an unit, which means that the values for the left, top, right, and bottom of the bounding rectangle have to be values between 0 and 100. This relative layout will produce proportional resizing of the chart element.
            </remarks>
            <seealso cref="P:Infragistics.Windows.Chart.Scene.MarginType"/>
            <seealso cref="F:Infragistics.Windows.Chart.Scene.MarginProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Scene.MarginType">
            <summary>
            Gets or sets a margin type for the chart element. If MarginType property is �Percent�, the Margin property has to be set.
            </summary>
            <remarks>
            The margin type can be set to Auto or Percent. The default value is Auto, and the position of the chart element is automatically created. For manual positioning the MarginType has to be set to Percent.  
            </remarks>
            <seealso cref="P:Infragistics.Windows.Chart.Scene.Margin"/>
            <seealso cref="F:Infragistics.Windows.Chart.Scene.MarginTypeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Scene.Perspective">
            <summary>
            Gets or sets perspective level for 3D charts, ranging in value from 0 to 100.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Scene.PerspectiveProperty"/>
            <remarks>
            A value of 100 represents 100%, meaning the chart is rendered at full perspective. Perspective is the 
            way in which objects appear to the eye based on their dimensions and the position. For example, 
            the parallel lines of a railway track are perceived as meeting at a distant point at the horizon. 
            As objects become more distant, they begin to appear smaller.
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.Scene.Scene3DBrush">
            <summary>
            Gets or sets the Brush that specifies how to paint the interior of the 3D scene. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Scene.Scene3DBrushProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Scene.DataFilter">
            <summary>
            Gets or sets a value that indicates whether the series are filtered if they have more than 1000 data points. This property is used to improve rendering performance for Line 2D, ScatterLine 2D and Area 2D chart.
            </summary>
            <remarks>
            This property activates an algorithm which replaces a group of data points with one and increase performance. This algorithm is activated only if there are more than 1000 data points in the series. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Scene.DataFilterProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.Stripe">
            <summary>
            Stripe keeps appearance, animation and unit properties for 
            axis stripe.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stripe.#ctor">
            <summary>
            Initializes a new instance of the Stripe class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stripe.AddChildren">
            <summary>
            Add child objects to logical tree
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stripe.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.Stripe.AnimationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Stripe.Animation"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Stripe.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Stripe.Stroke"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Stripe.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Stripe.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Stripe.UnitProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Stripe.Unit"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stripe.AxisUnitValidateCallback(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>true if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Stripe.FillProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Stripe.Fill"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Stripe.WidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Stripe.Width"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Stripe.WidthValidateCallback(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>true if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stripe.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stripe.LogicalChildren">
            <summary>
            Gets an enumerator for this element's logical child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stripe.Animation">
            <summary>
            Gets or sets the animation for Stripes. This animation draws stripe rectangles 
            from minimum to maximum axis position. Stripes could be animated one by one or all together.
            </summary>
            <remarks>
            This animation is only used to create growing effect for rectangles, but stripes animation could be 
            also created using brush property and WPF animation.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Stripe.AnimationProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stripe.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Stripe.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stripe.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Stripe.StrokeThicknessProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stripe.Unit">
            <summary>
            Gets or sets a distance between two neighboring stripes. If value is 0 double axis unit value is used. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Stripe.UnitProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stripe.Fill">
            <summary>
            Gets or sets the Brush that specifies how to paint the interior of the shape. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Stripe.FillProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Stripe.Width">
            <summary>
            Gets or sets a width between two neighboring stripes. If value is 0 automatic width is calculated from axis unit value. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Stripe.WidthProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.StripeCollection">
            <summary>
            Represents a collection of stripes. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StripeCollection.#ctor">
            <summary>
            Initializes a new instance of the StripeCollection class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StripeCollection.InsertItem(System.Int32,Infragistics.Windows.Chart.Stripe)">
            <summary>
            Inserts an item into the collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.StripeCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments. 
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.StripeCollection.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.DataPoint">
            <summary>
            Data Point class represents a basic data element which appears on 
            the chart (Column, pie slice, line segment, etc). This class also 
            keeps information about visual appearance of the element.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.#ctor">
            <summary>
            Initializes a new instance of the DataPoint class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled Mouse.MouseEnter attached event is raised on this element. 
            Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled Mouse.MouseLeave attached event is raised on this element. 
            Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.AddChildren">
            <summary>
            Add child objects to logical tree
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Sends notice when the specified property has been invalidated. 
            </summary>
            <param name="e">Event arguments that describe the property that changed, including the old and new values.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetSeries">
            <summary>
            Get the parent series for this data point.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetIChart">
            <summary>
            Get the parent IChart for this data point.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetFill(System.Int32,System.Int32)">
            <summary>
            Create fill for data point
            </summary>
            <param name="seriesIndex">Data series index</param>
            <param name="pointIndex">Data point index</param>
            <returns>Fill Brush from data point</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetSeriesFill(System.Int32)">
            <summary>
            Create fill for Series
            </summary>
            <param name="seriesIndex">Data series index</param>
            <returns>Fill Brush from Series</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetLegendFill(System.Int32,System.Int32)">
            <summary>
            Gets the legend fill.
            </summary>
            <param name="seriesIndex">Index of the series.</param>
            <param name="pointIndex">Index of the point.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetStroke(System.Int32,System.Int32)">
            <summary>
            Create fill stroke for data point
            </summary>
            <param name="seriesIndex">Data series index</param>
            <param name="pointIndex">Data point index</param>
            <returns>Stroke brush for data point</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetSeriesStroke(System.Int32)">
            <summary>
            Create fill stroke for Series
            </summary>
            <param name="seriesIndex">Data series index</param>
            <returns>Stroke brush for Series</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetLegendStroke">
            <summary>
            Gets the legend stroke. 
            </summary>
            <remarks>
            In 2d and 3d charts the stroke for the chart and the legend are different
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetStrokeThickness(System.Int32,System.Int32)">
            <summary>
            Create stroke thickness for data point
            </summary>
            <param name="seriesIndex">Data series index</param>
            <param name="pointIndex">Data point index</param>
            <returns>Stroke thickness for data point</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetSeriesStrokeThickness(System.Int32)">
            <summary>
            Create stroke thickness for series
            </summary>
            <param name="seriesIndex">Data series index</param>
            <returns>Stroke thickness for series</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetLegendStrokeThickness">
            <summary>
            Gets the legend stroke thickness.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetMarker">
            <summary>
            Gets marker from data point. If marker doesn�t exist gets marker from series.
            </summary>
            <returns>Marker from data point or data series</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetToolTip">
            <summary>
            Gets ToolTip from data point. If ToolTip doesn�t exist gets ToolTip from series.
            </summary>
            <returns>ToolTip from data point or data series</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetParameterValueBrush(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetParameterValueAnimation(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetParameterValueInt(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetExtraParameter(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Search for a ChartParameter in ExtraParameters property which keeps a reference to 
            additional ChartParameterCollection. This collection is used for chart 
            parameter styling purposes.
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>A chart parameter from ExtraParameters</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetParameterValueBool(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.IsDateTimeType(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetParameterValueDouble(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.IsParameterSet(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Check if chart parameter value is set
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>True if parameter is set</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetDoubleAnimationSpline(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Returns a double animation from data point or parent series for spline chart types (speciail case).
            </summary>
            <param name="pointIndex">Data point index from Data point collection</param>
            <param name="maxSpline">The size of entire spline segment in X Axis units.</param>
            <param name="splineStart">The start of a spline segment related to the current data point.</param>
            <param name="splineEnd">The end of a spline segment related to the current data point.</param>
            <returns>Double animation</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.SetBindValueObject(System.String,System.String,System.Object,Infragistics.Windows.Chart.Series)">
            <summary>
            This method set a data point property value from a data source. It converts 
            data value type to property type.
            </summary>
            <param name="propertyName">Data point's property name</param>
            <param name="valueName">Objects Value Name</param>
            <param name="value">Property value from a data source</param>
            <param name="series">Parent series</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.BindPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Represents the method that will handle the PropertyChanged event raised when a property is changed on a component.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.SetBindValue(System.String,System.Object,Infragistics.Windows.Chart.Series)">
            <summary>
            This method set a data point property value from a data source. It converts 
            data value type to property type.
            </summary>
            <param name="propertyName">Data point's property name</param>
            <param name="value">Property value from a data source</param>
            <param name="series">Parent series</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.SetChartAttributeObject(Infragistics.Windows.Chart.ChartParameterType,System.Object)">
            <summary>
            This method will remove all chart parameters which have specified chart 
            parameter type and add a new parameter with new value.
            </summary>
            <param name="type">Chart parameter type</param>
            <param name="value">Chart parameter value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.SetChartAttribute(Infragistics.Windows.Chart.ChartParameterType,System.Double)">
            <summary>
            This method will remove all chart parameters which have specified chart 
            parameter type and add a new parameter with new value.
            </summary>
            <param name="type">Chart parameter type</param>
            <param name="value">Chart parameter value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetDoubleAnimation(System.Int32)">
            <summary>
            Returns a double animation from data point or parent series.
            </summary>
            <param name="pointIndex">Data point index from Data point collection</param>
            <returns>Animation values</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPoint.GetPointAnimation(System.Int32)">
            <summary>
            Returns a point animation from data point or parent series.
            </summary>
            <param name="pointIndex">Data point index from Data point collection</param>
            <returns>Animation values</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPoint.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.DataPoint.Value"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPoint.LabelProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.DataPoint.Label"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPoint.ExtraParametersProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.DataPoint.ExtraParameters"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPoint.FillProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.DataPoint.Fill"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPoint.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.DataPoint.Stroke"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPoint.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.DataPoint.IsMouseOver"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPoint.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.DataPoint.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPoint.AnimationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.DataPoint.Animation"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPoint.MarkerProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.DataPoint.Marker"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPoint.NullValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.DataPoint.NullValue"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.LogicalChildren">
            <summary>
            Gets an enumerator for this element's logical child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.ChartParameters">
            <summary>
            Gets or sets chart parameters for this data point.
            </summary>
            <remarks>
            <p class="body">
            Chart parameters are used to decrese the number of public 
            properties used in series and data points.  Used for numerous 
            number of parameters which are different for every chart type.
            </p>
            <p class="body">
            If chart parameter is specified for a series it will apply on every 
            data point from the series. If a chart parameter is set for a data point, 
            the chart parameter from the series will be ignored.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.Value">
            <summary>
            Gets or sets the value of a data point. The value property is not used for all chart types. 
            Scatter,Stock, Candlestick and Bubble chart types use ChartParameters: ValueX, ValueY, ValueZ, 
            Radius, High, Low, Open, Close. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.DataPoint.ValueProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.Label">
            <summary>
            Gets or sets data point label. Data point label stores text values for axis labels.
            </summary>
            <remarks>
            <p class="body">To change appearance of the axis labels, font properties from 
            the Labels (See Labels property from Axis) has to be used. The label property of 
            a DataPoint is used to store text value only. Some chart types like pie or 
            doughnut use data point labels for legend items.</p>
            <p class="body">Important! If a chart has multiple series only Data Points 
            from the first series are used to fill axis labels. All other series are ignored.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.DataPoint.LabelProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.ExtraParameters">
            <summary>
            Gets or sets a reference to additional ChartParameterCollection. This collection is used for chart 
            parameter styling purposes.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.DataPoint.ExtraParametersProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.Fill">
            <summary>
            Gets or sets the Brush that specifies how to paint the interior of the shape. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.DataPoint.FillProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.DataPoint.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.IsMouseOver">
            <summary>
            Gets a value that indicates whether the mouse pointer is located over this element. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.DataPoint.IsMouseOverProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.DataPoint.StrokeThicknessProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.Animation">
            <summary>
            Gets or sets the animation for Data Point. This animation is different for every chart type.
            </summary>
            <remarks>
            This animation is used only when one data point has to be animated asynchronously from another 
            data points. The most common use of animation is from series, when data points are animated together. 
            This animation is only used to create growing effect, but data point animation could be also created 
            using brush property and WPF animation.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.DataPoint.AnimationProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.Marker">
            <summary>
            Gets or sets the marker. Marker is a colored shape which shows exact value of 
            a Data Point. Marker has corresponding marker label. Used in combination with 
            different chart types. 
            </summary>
            <remarks>
            <p class="body">Markers can be defined for series or data points. If Marker is 
            not defined for DataPoint, the marker from parent series is used.</p>
            <p class="body">Some chart types don�t use marker shapes or marker labels. 
            Chart types without Axis don�t have marker shapes (pie or doughnut charts). 
            3D Charts don�t have marker shapes, they have marker labels only.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.DataPoint.MarkerProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.ToolTip">
            <summary>
            Gets or sets the tool-tip object that is displayed for <see cref="T:Infragistics.Windows.Chart.DataPoint"/>. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPoint.NullValue">
            <summary>
            Gets or sets a value that indicates whether the Data Point has Null value.
            </summary>
            <remarks>
            By default NullValue is set to false. If NullValue is set to true data point is not 
            drawn. After data binding every value from the data source which is DBNull will be 
            set to 0 and NullValue will be set to true. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.DataPoint.NullValueProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.DataPointCollection">
            <summary>
            Represents a collection of data points. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPointCollection.#ctor">
            <summary>
            Initializes a new instance of the DataPointCollection class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPointCollection.Add(System.Double)">
            <summary>
            Creates a data point, sets a value and add a data point to the collection.
            </summary>
            <param name="value">Data Point Value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPointCollection.AddScatter(System.Double,System.Double)">
            <summary>
            Creates a data point fro scatter chart type, sets chart parameters and add a data point to the collection.
            </summary>
            <param name="x">X Value</param>
            <param name="y">Y Value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPointCollection.AddScatter(System.Double,System.Double,System.Double)">
            <summary>
            Creates a data point fro scatter chart type, sets chart parameters and add a data point to the collection.
            </summary>
            <param name="x">X Value</param>
            <param name="y">Y Value</param>
            <param name="z">Z Value</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPointCollection.InsertItem(System.Int32,Infragistics.Windows.Chart.DataPoint)">
            <summary>
            Inserts an item into the collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.DataPointCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments. 
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.DataPointCollection.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.DoughnutChart2D">
            <summary>
            This class creates 2D doughnut chart. This class is also 
            responsible for 2D doughnut chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DoughnutChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DoughnutChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DoughnutChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DoughnutChart2D.IsScene">
            <summary>
            Gets a Boolean value that specifies whether scene exist 
            for this chart type.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.DoughnutChart3D">
            <summary>
            This class creates 3D doughnut chart. This class is also 
            responsible for 3D doughnut chart animation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.PieChart3D">
            <summary>
            This class creates 3D pie chart. This class is also 
            responsible for 3D pie chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart3D.CreateMainCurve(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates Main curve of the pie slice.
            </summary>
            <param name="points">Mash points</param>
            <param name="normals">Mash normals</param>
            <param name="texturePoints">Mash texture positions</param>
            <param name="indices">Mash indices</param>
            <param name="startAngle">The start angle of the pie slice</param>
            <param name="endAngle">The end angle of the pie slice</param>
            <param name="radius">The pie radius</param>
            <param name="z">The half of the pie width</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart3D.CreateMainCurve(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="centerPoint"></param>
            <param name="pointsArc"></param>
            <param name="points">Mash points</param>
            <param name="normals">Mash normals</param>
            <param name="texturePoints">Mash texture positions</param>
            <param name="indices">Mash indices</param>
            <param name="startAngle">The start angle of the pie slice</param>
            <param name="endAngle">The end angle of the pie slice</param>
            <param name="radius">The pie radius</param>
            <param name="z">The half of the pie width</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart3D.CreateTop(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="points">Mash points</param>
            <param name="normals">Mash normals</param>
            <param name="texturePoints">Mash texture positions</param>
            <param name="indices">Mash indices</param>
            <param name="startAngle">The start angle of the pie slice</param>
            <param name="endAngle">The end angle of the pie slice</param>
            <param name="radius">The pie radius</param>
            <param name="z">The half of the pie width</param>
            <param name="inverseNormal"></param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart3D.CreateSideEdge(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="points">Mash points</param>
            <param name="normals">Mash normals</param>
            <param name="texturePoints">Mash texture positions</param>
            <param name="indices">Mash indices</param>
            <param name="startAngle">The start angle of the pie slice</param>
            <param name="endAngle">The end angle of the pie slice</param>
            <param name="radius">The pie radius</param>
            <param name="z">The half of the pie width</param>
            <param name="inverseNormal"></param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart3D.CreateCurveEdge(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="points">Mash points</param>
            <param name="normals">Mash normals</param>
            <param name="texturePoints">Mash texture positions</param>
            <param name="indices">Mash indices</param>
            <param name="startAngle">The start angle of the pie slice</param>
            <param name="endAngle">The end angle of the pie slice</param>
            <param name="radius">The pie radius</param>
            <param name="z">The half of the pie width</param>
            <param name="inverseNormal"></param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart3D.CreateSides(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="points">Mash points</param>
            <param name="normals">Mash normals</param>
            <param name="texturePoints">Mash texture positions</param>
            <param name="indices">Mash indices</param>
            <param name="startAngle">The start angle of the pie slice</param>
            <param name="endAngle">The end angle of the pie slice</param>
            <param name="radius">The pie radius</param>
            <param name="z">The half of the pie width</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart3D.CreateCurveSides(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="points">Mash points</param>
            <param name="normals">Mash normals</param>
            <param name="texturePoints">Mash texture positions</param>
            <param name="indices">Mash indices</param>
            <param name="startAngle">The start angle of the pie slice</param>
            <param name="endAngle">The end angle of the pie slice</param>
            <param name="radius">The pie radius</param>
            <param name="z">The half of the pie width</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart3D.GetNumberOfSegments(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the number of segments used to create a curve. 
            </summary>
            <param name="startAngle">The start angle of the shape.</param>
            <param name="endAngle">The end angle of the shape.</param>
            <param name="smooth">Coefficient of the curve smoothness.</param>
            <returns>The number of segments as double</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.PieChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.PieChart3D.IsScene">
            <summary>
            Gets a Boolean value that specifies whether scene exist 
            for this chart type.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.DoughnutChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.DoughnutChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.DoughnutChart3D.IsScene">
            <summary>
            Gets a Boolean value that specifies whether scene exist 
            for this chart type.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.HitTestArgs">
            <summary>
            This class contains return arguments of the hit test function.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.HitTestArgs.#ctor">
            <summary>
            Initializes a new instance of the HitTestArgs class. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.HitTestArgs.PointIndex">
            <summary>
            Gets or sets index of a selected data point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.HitTestArgs.Enabled">
            <summary>
            Gets or sets value which indicates that hit test is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.HitTestArgs.SeriesIndex">
            <summary>
            Gets or sets index of a series which contains 
            a selected data point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.HitTestArgs.Chart">
            <summary>
            Gets or sets a chart which contains a selected data point.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.HitTestArgs.SelectedObject">
            <summary>
            Gets or sets a selected object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.HitTestArgs.XValue">
            <summary>
            Gets or sets an X axis value where the mouse pointer is located.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.HitTestArgs.YValue">
            <summary>
            Gets or sets a Y axis value where the mouse pointer is located.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.HitTestArgs.XValueSecondary">
            <summary>
            Gets or sets an X Secondary axis value where the mouse pointer is located.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.HitTestArgs.YValueSecondary">
            <summary>
            Gets or sets a Y Secondary axis value where the mouse pointer is located.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Legend">
            <summary>
            The chart legend box appears alongside the chart border. It is used 
            to give text description for every data point or series appearance in 
            the chart. Many qualities of the legend are dependent upon ChartType.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Legend.#ctor">
            <summary>
            Initializes a new instance of the Legend class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Legend.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this 
            FrameworkElement has been updated. The specific dependency property that changed 
            is reported in the arguments parameter. Overrides OnPropertyChanged. 
            </summary>
            <param name="e">Event arguments that describe the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Legend.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.Legend.VisibleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Legend.Visible"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Legend.UseDataTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Legend.UseDataTemplate"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Legend.MarginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Legend.Margin"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Legend.MarginTypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Legend.MarginType"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Legend.LegendPane">
            <summary>
            Gets or Sets the legend pane
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Legend.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Legend.Visible">
            <summary>
            Gets or sets a value that indicates whether the legend is visible.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Legend.VisibleProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Legend.UseDataTemplate">
            <summary>
            Gets or sets a value that indicates whether legend items use data template.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Legend.UseDataTemplateProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Legend.Margin">
            <summary>
            Gets or sets the outer margin of an element using percent value from 0 to 100. This property doesn't have any effect if MarginType property is set to �Auto�.
            </summary>
            <remarks>
            The property uses percent as an unit, which means that the values for the left, top, right, and bottom of the bounding rectangle have to be values between 0 and 100. This relative layout will produce proportional resizing of the chart elements.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Legend.MarginProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Legend.MarginType">
            <summary>
            Gets or sets a margin type for the chart element. If MarginType property is �Percent�, the Margin property has to be set.
            </summary>
            <remarks>
            The margin type can be set to Auto or Percent. The default value is Auto, and the position of the chart element is automatically created. For manual positioning the MarginType has to be set to Percent.  
            </remarks>
            <seealso cref="P:Infragistics.Windows.Chart.Legend.Margin"/>
            <seealso cref="F:Infragistics.Windows.Chart.Legend.MarginTypeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Legend.Items">
            <summary>
            Gets the custom legend items. By default legend items are created using Series or DataPoint <see cref="P:Infragistics.Windows.Chart.DataPoint.Label"/>. 
            This collection should be used only if default appearance of the legend items has to be changed.
            </summary>
            <remarks>
            If the Items collection is empty legend items are automatically created from Series and DataPoints.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Chart.LegendPane.DrawItems">
            <summary>
            Draws legend items
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.LegendPane.GetSeries">
            <summary>
            Get series from the current chart.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendPane.MaxItemSize">
            <summary>
            Maximum size of legend item rectangle
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendPane.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.LegendPane.ItemForPoint">
            <summary>
            True if legend an item exist for every data point, otherwise there is 
            one legend item per series.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.LightCollection">
            <summary>
            Represents a collection of lights. Light is abstract class and 
            model3D object that represents lighting applied to a 3-D scene. 
            Light could be: Ambient, Directional, Point and Spot light.  
            </summary>
            <remarks>
            For 3D charts, by default, a light effect is created with default values (one DirectionalLight object, 
            and one PointLight object). However, if you want to change the Light effect for the 3D scene, you need 
            to create a Light effect and add it to the Lights collection. When you add a Light effect to the collection, 
            the default Light effect disappears, and only newly created Light effects can be used. 
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Chart.LightCollection.#ctor">
            <summary>
            Initializes a new instance of the LightCollection class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.LightCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments. 
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.LightCollection.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Mark">
            <summary>
            Mark keeps appearance, animation and unit properties for 
            axis gridlines and tick marks.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Mark.#ctor">
            <summary>
            Initializes a new instance of the Mark class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Mark.AddChildren">
            <summary>
            Add child objects to logical tree
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Mark.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.Mark.AnimationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Mark.Animation"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Mark.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Mark.Stroke"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Mark.VisibleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Mark.Visible"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Mark.DashStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Mark.DashStyle"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Mark.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Mark.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Mark.TickMarkSizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Mark.TickMarkSize"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Mark.OnTickMarkSizeValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Mark.UnitProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Mark.Unit"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Mark.AxisUnitValidateCallback(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>true if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="P:Infragistics.Windows.Chart.Mark.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Mark.LogicalChildren">
            <summary>
            Gets an enumerator for this element's logical child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Mark.Animation">
            <summary>
            Gets or sets the animation for Marks. This animation is used for gridlines and it draws lines 
            from minimum to maximum axis position. Gridlines could be animated one by one or all together.
            </summary>
            <remarks>
            This animation is only used to create growing effect for lines, but gridlines animation could be 
            also created using brush property and WPF animation.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Mark.AnimationProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Mark.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Mark.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Mark.Visible">
            <summary>
            Gets or sets a value that indicates whether the Mark is visible.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Mark.VisibleProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Mark.DashStyle">
            <summary>
            Gets or sets a value that describes the pattern of dashes generated for this Mark. Supported for 2D charts only.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Mark.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Mark.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Mark.StrokeThicknessProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Mark.TickMarkSize">
            <summary>
            Gets or sets the TickMark size. This is scaling factor applied to the default TickMark size. Value 1 is default size, a value between 0 and 1 decrease the default TickMark size and a value greater than 1 increase the default TickMark size. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Mark.TickMarkSizeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Mark.Unit">
            <summary>
            Gets or sets a distance between two neighboring gridlines or tickmarks. If value is 0 axis unit value is used. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Mark.UnitProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.Marker">
            <summary>
            Marker is a colored shape which shows exact value of a Data Point. Marker has 
            corresponding marker label. Used in combination with different chart types. Marker 
            class keeps information about marker shapes and corresponding label appearance. 
            Markers can be defined for series or data points. If Marker is not defined for 
            DataPoint, the marker from parent series is used.
            </summary>
            <remarks>
            Some chart types don�t use marker shapes or marker labels. Chart types without 
            Axis don�t have marker shapes (pie or doughnut charts). 3D Charts don�t have 
            marker shapes, they have marker labels only.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Chart.Marker.#ctor">
            <summary>
            Initializes a new instance of the Marker class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Marker.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.TypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.Type"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.FontFamilyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.FontFamily"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.FontSizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.FontSize"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Marker.OnFontSizeValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.FontStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.FontStyle"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.FontWeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.FontWeight"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.FontStretchProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.FontStretch"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.ForegroundProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.Foreground"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.FormatProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.Format"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.MarkerSizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.MarkerSize"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Marker.OnMarkerSizeValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.LabelDistanceProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.LabelDistance"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Marker.OnLabelDistanceValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.FillProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.Fill"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.Stroke"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Marker.UseDataTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Marker.UseDataTemplate"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.Type">
            <summary>
            Gets or sets type of a marker shape.
            </summary>
            <seealso cref="P:Infragistics.Windows.Chart.Marker.Type"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.FontFamily">
            <summary>
            Gets or sets the name of the specified font.
            </summary>
            <remarks>
            A FontFamily object specifying prefered font family. If font doesn�t exist, there is one or more fallback font families. The default value is the font determined by the MessageFontFamily metric. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.FontFamilyProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.FontSize">
            <summary>
            Gets or sets the font size for Data Point Marker Label.
            </summary>
            <remarks>
            A double value specifying the desired font size to use in points (1 point = 1/72 of an inch = 96/72 device independent pixels). The default value is determined by the MessageFontSize metric.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.FontSizeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.FontStyle">
            <summary>
            Gets or sets the marker font style.
            </summary>
            <remarks>
            The default value for FontStyle is Normal.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.FontStyleProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.FontWeight">
            <summary>
            Gets or sets the weight or thickness of the specified font.
            </summary>
            <remarks>
            A FontWeight enumeration value. The default value is Normal. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.FontWeightProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.FontStretch">
            <summary>
            Gets or sets the degree to which a font is condensed or expanded on the screen.
            </summary>
            <remarks>
            A member of the FontStretch class specifying the desired font-stretching characteristics to use. The default value is Normal.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.FontStretchProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.Foreground">
            <summary>
            Gets or sets the Brush to apply to the text contents of labels.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.ForegroundProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.Format">
            <summary>
            Gets or sets data point label format using the composite string formatting.
            </summary>
            <remarks>
            This property is used to format data point label string. Data point label should use data point 
            value which will be formatted on specified way and inserted into a text. Data Label format uses 
            .NET Composite Formatting specification. The �{Value}� text is replaced with data point value. For Bubble, 
            scatter and stock chart types {ValueX}, {ValueY}, {Radius}, {High}, {Low}, etc. formats are used. For 
            example, to create a label which displays a text �Data point value is: 3� where 3 is data point 
            value, we have to create a following format string �Data point value is: {Value}�. Few more examples: 
            1. �Product price is: $3.00 dollars� -&gt; �Product price is: {Value:C} dollars�. 2. �Calculated value is: 
            03.00� -&gt; �Calculated value is: {Value:00.00}�. For more information about format property see �Composite 
            Formatting� in .NET Framework Developer�s Guide. 
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.FormatProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.MarkerSize">
            <summary>
            Gets or sets the marker size. This is scaling factor applied to the default marker size. Value 1 is default size, a value between 0 and 1 decrease the default marker size and a value greater than 1 increase the default marker size.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.MarkerSizeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.LabelDistance">
            <summary>
            Gets or sets the label distance. This is scaling factor applied to the default label distance from the marker. Value 1 is default size, a value between 0 and 1 decrease the default distance and a value greater than 1 increase the default distance.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.MarkerSizeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.Fill">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.FillProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.StrokeThicknessProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Marker.UseDataTemplate">
            <summary>
            Gets or sets a value that indicates whether data points use data template.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Marker.UseDataTemplateProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Chart.PieChart2D">
            <summary>
            This class creates 2D pie chart. This class is also 
            responsible for 2D pie chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.PieChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.PieChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.PieChart2D.IsScene">
            <summary>
            Gets a Boolean value that specifies whether scene exist 
            for this chart type.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Render Axis lines and grid lines
            </summary>
            <param name="dc">Drawing Context</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.OnRender(Infragistics.Windows.Chart.GdiGraphics)">
            <summary>
            Render Axis lines and grid lines using GDI+ Drawing
            </summary>
            <param name="graphics">Gdi Graphics</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.DrawStripes(Infragistics.Windows.Chart.GdiGraphics,Infragistics.Windows.Chart.AxisType)">
            <summary>
            Draw stripes without animation using GDI+.
            </summary>
            <param name="graphics">Gdi Graphics</param>
            <param name="axisType">Axis Type; X and Y only (2D charts)</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.DrawStripes(System.Windows.Media.DrawingContext,Infragistics.Windows.Chart.AxisType)">
            <summary>
            Draw stripes with or without animation.
            </summary>
            <param name="dc">Drawing Context</param>
            <param name="axisType">Axis Type; X and Y only (2D charts)</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.DrawStripe(Infragistics.Windows.Chart.GdiGraphics,Infragistics.Windows.Chart.AxisType,Infragistics.Windows.Chart.Stripe)">
            <summary>
            Draw stripe without animation using GDI+.
            </summary>
            <param name="graphics">Gdi Graphics</param>
            <param name="axisType">Axis Type; X and Y only (2D charts)</param>
            <param name="stripe">Stripe to draw</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.DrawStripe(System.Windows.Media.DrawingContext,Infragistics.Windows.Chart.AxisType,Infragistics.Windows.Chart.Stripe)">
            <summary>
            Draw stripe with or without animation.
            </summary>
            <param name="dc">Drawing Context</param>
            <param name="axisType">Axis Type; X and Y only (2D charts)</param>
            <param name="stripe">Stripe to draw</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.DrawGridlines(System.Windows.Media.DrawingContext,Infragistics.Windows.Chart.AxisType,System.Boolean)">
            <summary>
            Draw grid lines with or without animation.
            </summary>
            <param name="dc">Drawing Context</param>
            <param name="axisType">Axis Type; X and Y only (2D charts)</param>
            <param name="major">True if major gridlines are drawn.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.DrawGridlines(Infragistics.Windows.Chart.GdiGraphics,Infragistics.Windows.Chart.AxisType,System.Boolean)">
            <summary>
            Draw grid lines without animation using GDI+.
            </summary>
            <param name="graphics">Gdi Graphics</param>
            <param name="axisType">Axis Type; X and Y only (2D charts)</param>
            <param name="major">True if major gridlines are drawn.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.GetLogarithmicMinorGridLineIntervals(Infragistics.Windows.Chart.AxisValue,System.Double)">
             <summary>
             Gets the logarithmic grid line intervals.
             
              Note: Major gridline is the one at integral powers, "|"
              Minor are the one in-between major, "+"
            
             |----+---+--+-++|----+---+--+-++|----+---+--+-++|
             </summary>
             <param name="axisValue">The axis value.</param>
             <param name="interval">The interval.</param>
             <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.GetNumOfTicks(Infragistics.Windows.Chart.AxisValue,System.Double)">
            <summary>
            Find the number of gridlines
            </summary>
            <param name="axis">Axis which contains gridlines</param>
            <param name="interval">The axis interval</param>
            <returns>The number of gridlines</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.RenderAxisLine(System.Windows.Media.DrawingContext,Infragistics.Windows.Chart.AxisType)">
            <summary>
            Draw axis line with or without animation.
            </summary>
            <param name="dc">Drawing Context</param>
            <param name="axisType">Axis Type; X and Y only (2D charts)</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingGridsArea.RenderAxisLine(Infragistics.Windows.Chart.GdiGraphics,Infragistics.Windows.Chart.AxisType)">
            <summary>
            Draw axis line without animation using GDI+.
            </summary>
            <param name="graphics">Gdi Graphics</param>
            <param name="axisType">Axis Type; X and Y only (2D charts)</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.PlottingGridsArea.ChartCreator">
            <summary>
            Gets Chart Creator
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.PlottingGridsArea.BorderBrush">
            <summary>
            The color of border
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingPane.Draw">
            <summary>
            Repaints the chart
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingPane.DrawWithException">
            <summary>
            Draws chart elements which belong to grid area and draw 
            exception on the control surface if thrown.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingPane.FastRenderingMode(System.Double,System.Double)">
            <summary>
            This rendering mode use fast GDI+ rendering to improve performance of data points.
            </summary>
            <param name="width">The width of the grid area</param>
            <param name="height">The height of the grid area</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingPane.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is used to create tooltips for 3D charts. Tooltips for 3D charts do not work 
            same as 2D charts. 2D charts are drawn using Framework elements and they have implemented 
            tooltips. 3D charts cannot use tooltips from Framework elements (model 3D is not Framework element). 
            This is implementation for 3D charts tooltips.
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingPane.IsFastChartType">
            <summary>
            Check if a chart type supports fast rendering.
            </summary>
            <returns>True if fast rendering is supported</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingPane.GetNumberOfPoints">
            <summary>
            Returns the number of all data points
            </summary>
            <returns>The number of points</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingPane.IsPerformance">
            <summary>
            Checks which rendering mode is used
            </summary>
            <returns>Returns true if fast rendering mode is enabled</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingPane3D.IsToolTipsEnabled(Infragistics.Windows.Chart.Chart)">
            <summary>
            Checks if any data point has tooltips enabled
            </summary>
            <param name="chart">The Chart</param>
            <returns>True if tooltips are enabled</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.PlottingPane3D.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is used to create tooltips for 3D charts. Tooltips for 3D charts do not work 
            same as 2D charts. 2D charts are drawn using Framework elements and they have implemented 
            tooltips. 3D charts cannot use tooltips from Framework elements (model 3D is not Framework element). 
            This is implementation for 3D charts tooltips.
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="T:Infragistics.Windows.Chart.HitTestInfo">
            <summary>
            Internal Hit test result class used for 3D Hit test.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.DataPointColor">
            <summary>
            Used to set the way on which data points get colors. By default colors for data points depend on 
            chart type (for example pie chart have different colors for every data point and column chart have 
            same color for all points).  
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPointColor.Auto">
            <summary>
            Colors for data points depend on chart type
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPointColor.Same">
            <summary>
            Data Points have same color for all chart types.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.DataPointColor.Different">
            <summary>
            Data Points have different colors for all chart types.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Theme">
            <summary>
            The Predefine look for the control.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.Aquarius">
            <summary>
            Theme Aquarius
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.Default">
            <summary>
            Theme Default
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.LucidDream">
            <summary>
            Theme Lucid Dream
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.Luminol">
            <summary>
            Theme Luminol
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.Nautilus">
            <summary>
            Theme Nautilus
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.Neon">
            <summary>
            Theme Neon
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.Peach">
            <summary>
            Theme Peach
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.Pumpkin">
            <summary>
            Theme Pumpkin
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.RedPlanet">
            <summary>
            Theme Red Planet
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.RoyaleVelvet">
            <summary>
            Theme Royale Velvet
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Theme.ThemePark">
            <summary>
            Theme Theme Park
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.MarginType">
            <summary>
            Margin types used for positioning of chart elements
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarginType.Auto">
            <summary>
            Automatic chart element positioning
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarginType.Percent">
            <summary>
            Manual chart element positioning
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.RenderingMode">
            <summary>
            Rendering mode is used to improve rendering performance for a big number 
            of data points.  If the value is �Auto� Rendering mode depends on number of data 
            points. If the number of points is greater than 100 the performance mode is active. 
            When Performance mode is active, some wpf features are disabled (animation, backgrounds, 
            themes, data templates, etc). Auto is default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.RenderingMode.Auto">
            <summary>
            If Auto mode is active the rendering mode depends on the number of data points. If the number of points is greater than 100 the performance mode is active.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.RenderingMode.Full">
            <summary>
            Used for high quality rendering. All wpf features are enabled (animation, backgrounds, themes, data templates, etc). 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.RenderingMode.Performance">
            <summary>
            Used for fast rendering of data points. When Performance mode is active, some wpf features are disabled (animation, backgrounds, themes, data templates, etc).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartType">
            <summary>
            Chart types used both for 2D and 3D
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Pie">
            <summary>
            A pie chart is a circular chart divided into sectors proportional to the percentages of the whole. 
            A pie chart always shows a single data series, and is useful for determining which item or items in the series are most significant.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Line">
            <summary>
            Line chart has data points plotted in series using evenly-spaced intervals and connected with a line to 
            emphasize the relationships between the points.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Area">
            <summary>
            An area chart displays series as a set of points connected by a line with the area below the line filled in. 
            Values are represented on the y-axis and categories are displayed on the x-axis.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Column">
            <summary>
            A column chart shows data points as rectangles which starts at the crossing value and ends at 
            the value which corresponds to the data point value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Bubble">
            <summary>
            A bubble chart shows data points using the first value for position end second value for relative radius.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Bar">
            <summary>
            A bar chart shows data points as rectangles which starts at the crossing value and ends at 
            the value which corresponds to the data point value. Similar to the column chart but it has horizontal orientation.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Doughnut">
            <summary>
            Like a pie chart, a doughnut chart shows the size of items that make up a data series proportional 
            to the total of the items in the series.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Cylinder">
            <summary>
            Cylinder chart looks like round column chart in 3D space. In 2D, cylinder chart is the same as column chart.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.CylinderBar">
            <summary>
            Cylinder Bar chart looks like round bar chart in 3D space. In 2D, cylinder bar chart is the same as bar chart.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Spline">
            <summary>
            Spline chart has similar functionality as line chart. Line chart has data points connected with 
            the strait lines and spline chart has data points connected with the smooth curve.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.StackedColumn">
            <summary>
            A stacked column chart is used to show cumulative values of data points which belong to 
            different data series and have same index or position inside parent series.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.StackedBar">
            <summary>
            A stacked bar chart is used to show cumulative values of data points which belong to different 
            data series and have same index or position inside parent series.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.StackedArea">
            <summary>
            A stacked area chart is used to show cumulative values of data points which belong to different 
            data series and have same index or position inside parent series.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.StackedCylinder">
            <summary>
            Stacked cylinder chart looks like round stacked column chart in 3D space. In 2D, stacked cylinder 
            chart is the same as stacked column chart.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.StackedCylinderBar">
            <summary>
            Stacked cylinder bar chart looks like round stacked bar chart in 3D space. In 2D, stacked 
            cylinder bar chart is the same as stacked bar chart.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Stacked100Column">
            <summary>
            A stacked 100% column chart is used to show relative cumulative values of data points (in percentages) which 
            belong to different data series and have same index or position inside parent series.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Stacked100Cylinder">
            <summary>
            Stacked 100% cylinder chart looks like rounded stacked 100% column chart in 3D space. In 2D, stacked 
            100 % cylinder chart is the same as stacked 100% column chart.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Stacked100CylinderBar">
            <summary>
            Stacked 100% cylinder bar chart looks like rounded stacked 100% bar chart in 3D space. In 2D, stacked 
            100 % cylinder bar chart is the same as stacked 100% bar chart.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Stacked100Bar">
            <summary>
            A stacked 100% bar chart is used to show relative cumulative values of data points (in percentages) which 
            belong to different data series and have same index or position inside parent series.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Stacked100Area">
            <summary>
            A stacked 100% area chart is used to show relative cumulative values of data points (in percentages) which 
            belong to different data series and have same index or position inside parent series.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Scatter">
            <summary>
            Scatter chart type is a point chart which uses two value axis (or 3 value axis in 3D). 
            Defined with X, Y and Z values from Chart parameters. This chart type does not 
            use Value property from data point!
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.ScatterLine">
            <summary>
            Scatter line chart type is a line chart which uses two value axis 
            (or 3 value axis in 3D). Defined with X, Y and Z values from Chart 
            parameters. This chart type does not use Value property from data point!
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Stock">
            <summary>
            Stock chart type is used to show stock market prices during the period of time. 
            Every data point shows High, Low, Open and Close prices. High and Low prices 
            are connected with vertical line, Open and Close prices are presented as horizontal 
            lines from left or right side of the main vertical line. This chart type does not use 
            Value property from data point! Instead, Chart parameters (High, Low, Open and Close) 
            are used as a data point values.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Candlestick">
            <summary>
            Candlestick chart type is used to show stock market prices during the period of time. 
            Every data point shows High, Low, Open and Close prices. Open and Close prices are 
            connected with a rectangle, which fill color depends on negative or positive difference 
            between Open and Close price. This chart type does not use Value property from data point! 
            Insted, Chart parameters (High, Low, Open and Close) are used as a data point values.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartType.Point">
            <summary>
            Point chart type uses category X axis and numeric Y axis (plus category Z axis for 3D chart). 
            Point chart is a chart type which has only markers placed at a position which corresponds to 
            the data point value.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.MarkerType">
            <summary>
            Data Point marker types. Markers are various shapes used to show exact data point values. 
            Used together with different chart types. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarkerType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarkerType.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarkerType.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarkerType.Triangle">
            <summary>
            Triangle
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarkerType.Hexagon">
            <summary>
            Hexagon
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarkerType.Star5">
            <summary>
            Star 5
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarkerType.Star6">
            <summary>
            Star 6
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarkerType.Star7">
            <summary>
            Star 7
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.MarkerType.Star8">
            <summary>
            Star 8
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.AxisType">
            <summary>
            Axis Types
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.AxisType.PrimaryX">
            <summary>
            Primary X Axis
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.AxisType.PrimaryY">
            <summary>
            Primary Y Axis
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.AxisType.PrimaryZ">
            <summary>
            Primary Z Axis
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.AxisType.SecondaryX">
            <summary>
            Secondary X Axis
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.AxisType.SecondaryY">
            <summary>
            Secondary Y Axis
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.ChartParameterType">
            <summary>
            Different types of chart parameters. Chart parameters provides a base set of parameters for different chart 
            types.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.ValueX">
            <summary>
            Data point Value used for scatter chart types.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.ValueY">
            <summary>
            Data point Value used for scatter chart types.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.ValueZ">
            <summary>
            Data point Value used for scatter chart types.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.Radius">
            <summary>
            Data point Value used for bubble chart.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.High">
            <summary>
            Data point value used for stock chart types.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.Low">
            <summary>
            Data point value used for stock chart types.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.Open">
            <summary>
            Data point value used for stock chart types.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.Close">
            <summary>
            Data point value used for stock chart types.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.PointWidth">
            <summary>
            Used to define Point Width for category axis.  Value 1 for PointWidth means default width for data points, 
            0.5 is twice smaller than default width and value 2 is twice bigger than default width. Default value for 
            this parameter is 1;
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.EdgeSize3D">
            <summary>
            Edge Size of the 3D charts. The value for �EdgeSize3D� chart parameter has to be between 0 and 1. Default value is 0.5.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.Pie3DRounding">
            <summary>
            Rounding Size of the 3D pie chart. The value for �Pie3DRounding� chart parameter has to be between 1 and 3. Default value is 2.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.Exploded">
            <summary>
            Used to create exploded pie or doughnut slice.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.ExplodedRadius">
            <summary>
            Radius of exploded pie or doughnut chart. The value for �ExplodedRadius� chart parameter has to be between 0 and 1.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.Column3DNumberOfSides">
            <summary>
            The number of sides for 3D column chart. The value for �Column3DNumberOfSides� chart parameter has to be between 3 and 8.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.Column3DStar">
            <summary>
            Column 3D chart has a shape of the star.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.Column3DStarNumberOfSides">
            <summary>
            The number of sides for 3D column chart with star shape. The value for �Column3DStar� chart parameter has to be between 4 and 8.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.CandlestickNegativeFill">
            <summary>
            The brush used to fill the candlestick Open � Close rectangle if difference 
            between Open price and Close price is negative (If this value is positive Fill 
            brush from series or data points is used). Default color is black.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.CandlestickNegativeStroke">
            <summary>
            The stroke brush used for candlestick Open � Close rectangle if difference 
            between Open price and Close price is negative (If this value is positive Fill 
            brush from series or data points is used). Default color is gray.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.RectangleRounding">
            <summary>
            Used to define radius of the ellipse that is used to round the corners of the 
            rectangle. Used for 2D chart which data point shape is rectangle (Column, Bar, 
            Stacked Column, Candlestick, etc.)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.ChartParameterType.ExplodedAnimation">
            <summary>
            Used to define animation for exploded slice for pie and doughnut chart.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.Scene3D">
            <summary>
            Scene 3D contains methods and properties responsible for 
            drawing 3D Scene. The 3D scene contains 3 areas XY, XZ and YZ. 
            All this areas have background, gridlines and labels.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.#ctor(Infragistics.Windows.Chart.Chart,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="chart">Chart container for this scene</param>
            <param name="wallSize">The scene wall size</param>
            <param name="width">The scene width</param>
            <param name="height">The scene height</param>
            <param name="depth">The scene depth</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.IsSceneType(Infragistics.Windows.Chart.SceneType)">
            <summary>
            Gets Scene type. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws the 3D scene without data points. The scene has 3 sides, grids, labels etc. 
            </summary>
            <param name="model3DGroup">Collection of 3-D models.</param>
            <param name="rotateTransform3D">Specifies a rotation transformation.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.Create(System.Windows.Media.Brush,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Create 3D sides of the scene: XY, XZ and YZ
            </summary>
            <param name="brush">Brush of the scene sides.</param>
            <param name="rotateTransform3D">Specifies a rotation transformation.</param>
            <returns>A 3-D model comprised of a MeshGeometry3D and a Material.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.CreateSceneSide(System.Windows.Media.Media3D.RotateTransform3D,System.Windows.Media.Media3D.Model3DCollection,Infragistics.Windows.Chart.Space3DPlane,System.Windows.Media.Brush)">
            <summary>
            Creates textures with gridlines for 3D scene.
            </summary>
            <param name="rotateTransform3D">Specifies a rotation transformation.</param>
            <param name="modelCollection">Represents an ordered collection of Model3D objects.</param>
            <param name="plane">A 3D plane</param>
            <param name="brush">Brush of the scene sides.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.DrawStripes(System.Windows.Media.DrawingContext,Infragistics.Windows.Chart.AxisType,Infragistics.Windows.Chart.AxisType)">
            <summary>
            Draw and animates stripes on the scene surfaces
            </summary>
            <param name="context">Drawing context from the drawing brush used for scene surface.</param>
            <param name="axisTypeV">Axis type for vertical stripes.</param>
            <param name="axisTypeH">Axis type for horizontal stripes.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.DrawStripeArea(System.Windows.Media.DrawingContext,Infragistics.Windows.Chart.AxisType,Infragistics.Windows.Chart.AxisType,Infragistics.Windows.Chart.Stripe,System.Boolean)">
            <summary>
            Draw and animates grid lines on the scene surfaces
            </summary>
            <param name="context">Drawing context from the drawing brush used for scene surface.</param>
            <param name="axisType1">Axis type of the first axis.</param>
            <param name="axisType2">Axis type of the second axis.</param>
            <param name="stripe">Stripe to draw</param>
            <param name="vertical">True for vertical strips drawing</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.DrawGridArea(System.Windows.Media.DrawingContext,Infragistics.Windows.Chart.AxisType,Infragistics.Windows.Chart.AxisType,System.Boolean)">
            <summary>
            Draw and animates grid lines on the scene surfaces
            </summary>
            <param name="context">Drawing context from the drawing brush used for scene surface.</param>
            <param name="axisType1">Axis type of the first axis.</param>
            <param name="axisType2">Axis type of the second axis.</param>
            <param name="isMajor">True if major gridlines are drawn.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.CreateLabels(System.Windows.Media.Media3D.RotateTransform3D,System.Windows.Media.Media3D.Model3DCollection,Infragistics.Windows.Chart.Space3DAxis)">
            <summary>
            Create area with labels. Labels are created as a texture.
            </summary>
            <param name="rotateTransform3D">Specifies a rotation transformation.</param>
            <param name="modelCollection">Represents an ordered collection of Model3D objects.</param>
            <param name="spaceAxis">A 3D space axis</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.IsAxisVisible(Infragistics.Windows.Chart.AxisType)">
            <summary>
            Checks is axis are visible
            </summary>
            <param name="type">Axis type</param>
            <returns>True if visible</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.CreateLabelsBrushX(System.Double,System.Double,System.Double)">
            <summary>
            Create Label Brush for X Axis.
            </summary>
            <param name="relWidth">The width of a label area in 3D coordinate system.</param>
            <param name="relHeight">The height of a label area in 3D coordinate system.</param>
            <param name="labelMargine">The relative size of margin.</param>
            <returns>The drawing brush with axis labels.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.CreateLabelsBrushY(System.Double,System.Double,System.Double)">
            <summary>
            Create Label Brush for Y Axis.
            </summary>
            <param name="relWidth">The width of a label area in 3D coordinate system.</param>
            <param name="relHeight">The height of a label area in 3D coordinate system.</param>
            <param name="labelMargine">The relative size of margin.</param>
            <returns>The drawing brush with axis labels.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.CreateLabelsBrushZ(System.Double,System.Double,System.Double)">
            <summary>
            Create Label Brush for Z Axis.
            </summary>
            <param name="relWidth">The width of a label area in 3D coordinate system.</param>
            <param name="relHeight">The height of a label area in 3D coordinate system.</param>
            <param name="labelMargine">The relative size of margin.</param>
            <returns>The drawing brush with axis labels.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.GetPen(Infragistics.Windows.Chart.AxisType,System.Boolean)">
            <summary>
            Creates pen for horizontal and vertical gridlines.
            </summary>
            <param name="axisType">Axis type</param>
            <param name="major">True if gridlines are major</param>
            <returns>A pen used for gridlines</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Scene3D.Cube(System.Windows.Media.Media3D.Point3DCollection,System.Windows.Media.Media3D.Vector3DCollection,System.Windows.Media.PointCollection,System.Windows.Media.Int32Collection,System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,Infragistics.Windows.Chart.Space3DPlane)">
            <summary>
            Create a cube which represents a side of the 3D scene.
            </summary>
            <param name="points">A collection of vertex positions for a MeshGeometry3D</param>
            <param name="normals">A collection of normal vectors for the MeshGeometry3D</param>
            <param name="texturePoints">A collection of texture coordinates for the MeshGeometry3D</param>
            <param name="indices">A collection of triangle indices for the MeshGeometry3D</param>
            <param name="center">The center of the cube</param>
            <param name="width">The width of the cube</param>
            <param name="height">The height of the cube</param>
            <param name="depth">The depth of the cube</param>
            <param name="plane">The side of the scene: XY, YZ or XZ</param>
        </member>
        <member name="T:Infragistics.Windows.Chart.Series">
            <summary>
            Series is used as a container for <see cref="P:Infragistics.Windows.Chart.Series.DataPoints"/>. Has data binding 
            functionality and default appearance for all data points if appearance is not 
            specified per data point.
            </summary>
            <remarks>
            When a chart is deployed on the page, a default column chart appears with two series. 
            This default chart does not contain any data, but when the chart is placed into a visual 
            design surface, the chart automatically creates demo data to give it some appearance will 
            it is being worked with, or until you supply your data. As soon as you add actual data to 
            the control, the demo data disappears from the chart. You cannot change the sample data 
            because it does not exist in the Series collection. 
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.#ctor">
            <summary>
            Initializes a new instance of the Series class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Sends notice when the specified property has been invalidated. 
            </summary>
            <param name="e">Event arguments that describe the property that changed, including the old and new values.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.GetAxisX">
            <summary>
            Returns active X axis for this series
            </summary>
            <returns>X axis</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.GetParameterValueBrush(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.GetParameterValueAnimation(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.GetParameterValueInt(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.GetExtraParameter(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Search for a ChartParameter in ExtraParameters property which keeps a reference to 
            additional ChartParameterCollection. This collection is used for chart 
            parameter styling purposes.
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>A chart parameter from ExtraParameters</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.GetParameterValueBool(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.GetParameterValueDouble(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Gets chart parameter value using chart parameter type
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>Chart parameter value from the parameter collection</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.GetAttribute(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Returns a chart parameter from series.
            </summary>
            <param name="type">Chart Parameter Type</param>
            <returns>A Chart parameter or null if an attribute doesn�t exist.</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.GetPredefinedBrush(System.Int32,System.Boolean)">
            <summary>
            Create a random colors or colors from palette
            </summary>
            <param name="index">Index of color</param>
            <param name="colorFromPoint">True if color is different for every data point.</param>
            <returns>Brush with predefined color</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.IsParameterSet(Infragistics.Windows.Chart.ChartParameterType)">
            <summary>
            Check if chart parameter value is set
            </summary>
            <param name="type">Chart parameter type</param>
            <returns>True if parameter is set</returns>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.GetIChart">
            <summary>
            Get the parent IChart for this data series.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.AddChildren">
            <summary>
            Add child objects to logical tree
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.SplitDataMapping">
            <summary>
            Split DataMapping string and creates arrays with column and value names
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.DataBind">
            <summary>
            This method binds various data source types to data points of this series.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.bindingList_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Occurs when the collection changes, either by adding or removing an item. 
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.DataBind(System.Collections.IEnumerable)">
            <summary>
            Data bind data from IEnumerable to data points.
            </summary>
            <param name="source">IEnumerable</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.DataBindSet(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Data bind data from nested IEnumerable to data points without adding new points.
            </summary>
            <param name="source">IEnumerable</param>
            <param name="propertyIndex">The index of a property name to bind</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.DataBindAdd(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Data bind data from nested IEnumerable to data points without adding new points.
            </summary>
            <param name="source">IEnumerable</param>
            <param name="propertyIndex">The index of a property name to bind</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.DataBind(System.Data.DataSet)">
            <summary>
            Data bind data from data set to data points.
            </summary>
            <param name="source">Data set</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.DataBind(System.Xml.XmlNode)">
            <summary>
            Data bind data from XML data source to data points.
            </summary>
            <param name="source">Xml node</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.Series.DataBind(System.Data.DataTable)">
            <summary>
            Data bind data from data table to data points.
            </summary>
            <param name="source">Data table</param>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.ExtraParametersProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.ExtraParameters"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.ChartTypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.ChartType"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.DataPointColorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.DataPointColor"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.DataMappingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.DataMapping"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.DataSourceProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.DataSource"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.FillProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.Fill"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.Stroke"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.AnimationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.Animation"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.LabelProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.Label"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.MarkerProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.Marker"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.AxisXProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.AxisX"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.AxisYProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.AxisY"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Chart.Series.UseDataTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Chart.Series.UseDataTemplate"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.RealIndex">
            <summary>
            The real index is use for Z position for 3D charts. Different Z 
            positions exist because of stacked chart types.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.LogicalChildren">
            <summary>
            Gets an enumerator for this element's logical child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.DataPoints">
            <summary>
            Gets or sets data points for this series.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.ChartParameters">
            <summary>
            Gets or sets chart parameters for this series.
            </summary>
            <remarks>
            <p class="body">
            Chart parameters are used to decrese the number of public 
            properties used in series and data points.  Used for numerous 
            number of parameters which are different for every chart type.
            </p>
            <p class="body">
            If chart parameter is specified for a series it will apply on every 
            data point from the series. If a chart parameter is set for a data point, 
            the chart parameter from the series will be ignored.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.ExtraParameters">
            <summary>
            Gets or sets a reference to additional ChartParameterCollection. This collection is used for chart 
            parameter styling purposes.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Series.ExtraParametersProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.ChartType">
            <summary>
            Gets or sets a chart type used for this data series. For 3D chart types, <see cref="P:Infragistics.Windows.Chart.XamChart.View3D"/> property of the <see cref="T:Infragistics.Windows.Chart.XamChart"/> control has to be set to �true�.
            </summary>
            <para class="body">Refer to the <a href="xamChart_Chart_Types.html">Chart Types</a> topic in the Developer's Guide for a explanation of the various chart types.</para>
            <seealso cref="F:Infragistics.Windows.Chart.Series.ChartTypeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.DataPointColor">
            <summary>
            Gets or sets a value that indicates a way on which data points get colors. By default colors for data points depend on chart type (for example pie chart have different colors for every data point and column chart have same color for all points).
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Series.DataPointColorProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.DataMapping">
            <summary>
            Gets or sets an expression string used to define data binding. In the simplest case, this is just a column name from a data table.
            </summary>
            <remarks>
            If just a column name is specified, the values from data table will be bound to 
            <see cref="P:Infragistics.Windows.Chart.DataPoint.Value"/> property of a <see cref="T:Infragistics.Windows.Chart.DataPoint"/>. To specify multiple binding it is necessary to divide 
            column and value names using ; character (For example: "X = myXColumn; Y = myYColumn"). 
            The Character = is used to split Property Value name from Column name 
            (For example: "Value = mySalePrice"). In the following text we have few examples of 
            data binding: 
            <ul>
            <li>If Just column name is used "XColumn" the value will be bind to the Value property of a data point. We can also use following syntax to bind to the value property:  "Value = myXColumn".</li>
            <li>This example shows how to bind data for the scatter chart: "ValueX = myXColumn; ValueY = myYColumn; ValueZ = myZColumn". X, Y and Z are <see cref="T:Infragistics.Windows.Chart.ChartParameter"/>.</li>
            <li>The next example shows how to bind data for the stock chart: "High = myHiColumnName; Low = myLowColumnName; Open = myOpenColumnName; Close = myCloseColumnName". High, Low, Open and Close are <see cref="T:Infragistics.Windows.Chart.ChartParameter"/>.</li>
            <li>At the end we have example of binding data to the bubble chart: "ValueX = myXColumn; ValueY = myYColumn; ValueZ = myZColumn; Radius = myRColumn", where myXColumn, myYColumn, myZColumn and myRColumn are column names from your data base.</li>
            </ul>
            Contrary to the <see cref="P:Infragistics.Windows.Chart.DataPoint.Value"/> property of the <see cref="T:Infragistics.Windows.Chart.DataPoint"/>, ValueX, ValueY, ValueZ, Radius, High, Low, Open and Close values are 
            <see cref="T:Infragistics.Windows.Chart.ChartParameter"/> and can be found in the <see cref="P:Infragistics.Windows.Chart.DataPoint.ChartParameters"/> collection (data point�s property). Data Binding 
            process creates data points and chart parameters inside data points (if necessary for scatter, bubble, stock, etc.) and fill 
            collection of data points from <see cref="T:Infragistics.Windows.Chart.Series"/>.
            </remarks>
            <para class="body">Refer to the <a href="xamChart_Data_Mapping.html">Data Mapping</a> topic in the Developer's Guide for a explanation of the various chart types data binding.</para>
            <seealso cref="M:Infragistics.Windows.Chart.XamChart.DataSourceRefresh"/>
            <seealso cref="F:Infragistics.Windows.Chart.Series.DataMappingProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.DataSource">
            <summary>
            Gets or sets a data source used to bind data to this series. Data source could be DataSet, DataTable, Collection, XML Data source, etc.
            </summary>
            <remarks>
            A <see cref="T:Infragistics.Windows.Chart.DataPoint"/> is created for every record, and the <see cref="P:Infragistics.Windows.Chart.DataPoint.Value"/> property of 
            the data point will be filled with a value from the specified data source. The series will be filled with created data points. 
            If <see cref="P:Infragistics.Windows.Chart.Series.DataMapping"/> property is not specified, only the <see cref="P:Infragistics.Windows.Chart.DataPoint.Value"/> property from data point will be set. To fill <see cref="P:Infragistics.Windows.Chart.DataPoint.Label"/> or 
            <see cref="P:Infragistics.Windows.Chart.DataPoint.ChartParameters"/> (Chart parameters keep values for Stock or Scatter chart types), 
            the <see cref="P:Infragistics.Windows.Chart.Series.DataMapping"/> property from the series has to be used. 
            </remarks>
            <seealso cref="P:Infragistics.Windows.Chart.Series.DataMapping"/>
            <seealso cref="M:Infragistics.Windows.Chart.XamChart.DataSourceRefresh"/>
            <seealso cref="F:Infragistics.Windows.Chart.Series.DataSourceProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.Fill">
            <summary>
            Gets or sets the Brush that specifies how to paint the interior of the shape. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Series.FillProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Series.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Series.StrokeThicknessProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.Animation">
            <summary>
            Gets or sets the animation for Series. This animation is different for every chart type.
            </summary>
            <remarks>
            This animation is used only when one data point has to be animated synchronously with another 
            data points. Data Points could be animated using animation property from data points, but 
            the most common use of animation is from series, when data points are animated together. This 
            animation is only used to create growing effect, but data point animation could be also created 
            using brush property and WPF animation.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Series.AnimationProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.Label">
            <summary>
            Gets or sets series label. Series labels stores text values for the legend. In 3D they are used for category Z labels also.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Series.LabelProperty"/>
            <remarks>
            <p class="body">To change appearance of the legend items the font properties from the Legend has to be used. Label property of a Series is used only to store a text value.</p>
            <p class="body">Important! Some chart types like pie or doughnut use data point labels for legend items.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.Marker">
            <summary>
            Gets or sets the marker. Marker is a colored shape which shows exact value of 
            a Data Point. Marker has corresponding marker label. Used in combination with 
            different chart types. 
            </summary>
            <remarks>
            <p class="body">Markers can be defined for series or data points. If Marker is 
            not defined for DataPoint, the marker from parent series is used.</p>
            <p class="body">Some chart types don�t use marker shapes or marker labels. 
            Chart types without Axis don�t have marker shapes (pie or doughnut charts). 
            3D Charts don�t have marker shapes, they have marker labels only.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Series.MarkerProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.AxisX">
            <summary>
            Gets or sets the X Axis Name. Used to make connection between Series and Axes for Secondary axes.
            </summary>
            <remarks>
            Every series needs X and Y axes for 2D charts and X, Y and Z axes for 3D charts.  Every chart scene 
            can have 5 axes 3 Primary and 2 secondary (3D charts cannot have secondary axes). For example, series can use only one X axis, and it could 
            be primary or secondary.  To specify which axis we want to use we have to set the same text for AxisX 
            property of the Series and the <see cref="P:Infragistics.Windows.Chart.Axis.Name"/> property of an axis. If those properties are empty the primary axes are used.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Series.AxisXProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.AxisY">
            <summary>
            Gets or sets the Y Axis Name. Used to make connection between Series and Axes for Secondary axes.
            </summary>
            <remarks>
            Every series needs X and Y axes for 2D charts and X, Y and Z axes for 3D charts.  Every chart scene 
            can have 5 axes 3 Primary and 2 secondary (3D charts cannot have secondary axes). For example, series can use only one Y axis, and it could 
            be primary or secondary.  To specify which axis we want to use we have to set the same text for AxisY 
            property of the Series and the <see cref="P:Infragistics.Windows.Chart.Axis.Name"/> property of an axis. If those properties are empty the primary axes are used.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Chart.Series.AxisYProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.UseDataTemplate">
            <summary>
            Gets or sets a value that indicates whether data points use a data template.
            </summary>
            <seealso cref="F:Infragistics.Windows.Chart.Series.UseDataTemplateProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Chart.Series.ToolTip">
            <summary>
            Gets or sets the tool-tip object that is displayed for this <see cref="T:Infragistics.Windows.Chart.Series"/>. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.SeriesCollection">
            <summary>
            Represents a collection of data series. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.SeriesCollection.#ctor">
            <summary>
            Initializes a new instance of the SeriesCollection class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.SeriesCollection.InsertItem(System.Int32,Infragistics.Windows.Chart.Series)">
            <summary>
            Inserts an item into the collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Infragistics.Windows.Chart.SeriesCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments. 
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.SeriesCollection.EnableRefresh">
            <summary>
            Gets or sets Enable Refresh
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.SeriesCollection.ChartParent">
            <summary>
            The parent object
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.SplineChart2D">
            <summary>
            This class creates 2D spline chart. This class is also 
            responsible for 2D spline chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.SplineChart2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.SplineChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.SplineChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.SplineChart3D">
            <summary>
            This class creates 3D spline chart. This class is also 
            responsible for 3D spline chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.SplineChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.SplineChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.StackedAreaChart2D">
            <summary>
            This class creates 2D stacked area chart. This class is also 
            responsible for 2D stacked area chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StackedAreaChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedAreaChart2D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.StackedAreaChart3D">
            <summary>
            This class creates 3D stacked area chart. This class is also 
            responsible for 3D stacked area chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StackedAreaChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedAreaChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedAreaChart3D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.StackedColumnChart2D">
            <summary>
            This class creates 2D stacked column chart. This class is also 
            responsible for 2D stacked column chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StackedColumnChart2D.Draw2D">
            <summary>
            Draws data points for different 2D chart types using Shapes. Draws data points for 
            all series which have selected chart type. Creates hit test functionality, 
            mouse events and tooltips for data points.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedColumnChart2D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedColumnChart2D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.StackedColumnChart3D">
            <summary>
            This class creates 3D stacked column chart. This class is also 
            responsible for 3D stacked column chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StackedColumnChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedColumnChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedColumnChart3D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Chart.StackedCylinderChart3D">
            <summary>
            This class creates 3D stacked cylinder chart. This class is also 
            responsible for 3D stacked cylinder chart animation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Chart.StackedCylinderChart3D.Draw3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.RotateTransform3D)">
            <summary>
            Draws data points for different 3D chart types using 3D models. Creates data points 
            as 3D shapes for all series which have selected chart type. Creates hit test functionality 
            and tooltips for data points.
            </summary>
            <param name="model3DGroup">Model 3D group which keeps all column 3D objects.</param>
            <param name="rotateTransform3D">3D Rotation angles of the scene.</param>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedCylinderChart3D.IsColorFromPoint">
            <summary>
            Gets a Boolean value that specifies whether every data point of 
            the series have different color for this chart type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Chart.StackedCylinderChart3D.IsStacked">
            <summary>
            Gets a Boolean value that specifies whether this chart type is stacked chart type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Internal.ChartThemeTypeConverter">
            <summary>
            A custom type converter for providing a list of themes available for the <see cref="T:Infragistics.Windows.Chart.XamChart"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.Internal.ChartThemeTypeConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Themes.Internal.ChartThemeTypeConverter"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.ChartResourceSet`1">
            <summary>
            Abstract base class used to supply style resources for a specific look for Chart.
            </summary>
            <typeparam name="T">A <see cref="T:Infragistics.Windows.Themes.ResourceSetLocator"/> derived class that must have a public parameterless constructor.</typeparam>
        </member>
        <member name="P:Infragistics.Windows.Themes.ChartResourceSet`1.Grouping">
            <summary>
            Returns the grouping that the resources are applied to (read-only)
            </summary>
            <remarks>
            Examples: ChartBase, Editors, ChartBase, WPF etc.
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Themes.ChartResourceSet`1.Theme">
            <summary>
            Returns the name of the look (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.ChartResourceSet`1.Resources">
            <summary>
            Returns the ResourceDictionary containing the associated styles (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.ChartResourceSet`1.Location">
            <summary>
            Returns the <see cref="T:Infragistics.Windows.Themes.ResourceSetLocator"/> that describes the theme information for the resource set.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme1">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme1.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme1.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme1.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme1.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme1.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme1.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme2">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme2.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme2.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme2.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme2.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme2.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme2.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme4">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme4.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme4.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme4.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme4.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme4.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme4.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme5">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme5.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme5.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme5.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme5.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme5.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme5.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme6">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme6.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme6.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme6.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme6.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme6.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme6.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme7">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme7.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme7.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme7.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme7.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme7.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme7.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme8">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme8.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme8.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme8.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme8.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme8.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme8.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme9">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme9.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme9.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme9.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme9.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme9.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme9.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme10">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme10.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme10.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme10.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme10.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme10.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme10.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme11">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme11.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme11.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme11.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme11.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme11.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme11.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme12">
            <summary>
            Class used to supply style resources
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme12.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Theme12.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme12.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme12.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme12.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.Theme12.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
    </members>
</doc>
