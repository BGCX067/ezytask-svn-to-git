#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ezytask.infrastructure.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ezytask")]
	public partial class ezytaskDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssignment(Assignment instance);
    partial void UpdateAssignment(Assignment instance);
    partial void DeleteAssignment(Assignment instance);
    partial void InsertWorkHour(WorkHour instance);
    partial void UpdateWorkHour(WorkHour instance);
    partial void DeleteWorkHour(WorkHour instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertRight(Right instance);
    partial void UpdateRight(Right instance);
    partial void DeleteRight(Right instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRoles_Right(Roles_Right instance);
    partial void UpdateRoles_Right(Roles_Right instance);
    partial void DeleteRoles_Right(Roles_Right instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public ezytaskDataContext() : 
				base(global::ezytask.infrastructure.Properties.Settings.Default.ezytaskConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ezytaskDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ezytaskDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ezytaskDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ezytaskDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Assignment> Assignments
		{
			get
			{
				return this.GetTable<Assignment>();
			}
		}
		
		public System.Data.Linq.Table<WorkHour> WorkHours
		{
			get
			{
				return this.GetTable<WorkHour>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Right> Rights
		{
			get
			{
				return this.GetTable<Right>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Roles_Right> Roles_Rights
		{
			get
			{
				return this.GetTable<Roles_Right>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[Table(Name="dbo.Assignments")]
	public partial class Assignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAssignment;
		
		private int _IdTask;
		
		private int _IdUser;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _Description;
		
		private System.Nullable<int> _Estimation;
		
		private EntitySet<WorkHour> _WorkHours;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAssignmentChanging(int value);
    partial void OnIdAssignmentChanged();
    partial void OnIdTaskChanging(int value);
    partial void OnIdTaskChanged();
    partial void OnIdUserChanging(int value);
    partial void OnIdUserChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEstimationChanging(System.Nullable<int> value);
    partial void OnEstimationChanged();
    #endregion
		
		public Assignment()
		{
			this._WorkHours = new EntitySet<WorkHour>(new Action<WorkHour>(this.attach_WorkHours), new Action<WorkHour>(this.detach_WorkHours));
			this._Task = default(EntityRef<Task>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_IdAssignment", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdAssignment
		{
			get
			{
				return this._IdAssignment;
			}
			set
			{
				if ((this._IdAssignment != value))
				{
					this.OnIdAssignmentChanging(value);
					this.SendPropertyChanging();
					this._IdAssignment = value;
					this.SendPropertyChanged("IdAssignment");
					this.OnIdAssignmentChanged();
				}
			}
		}
		
		[Column(Storage="_IdTask", DbType="Int NOT NULL")]
		public int IdTask
		{
			get
			{
				return this._IdTask;
			}
			set
			{
				if ((this._IdTask != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTaskChanging(value);
					this.SendPropertyChanging();
					this._IdTask = value;
					this.SendPropertyChanged("IdTask");
					this.OnIdTaskChanged();
				}
			}
		}
		
		[Column(Storage="_IdUser", DbType="Int NOT NULL")]
		public int IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Estimation", DbType="Int")]
		public System.Nullable<int> Estimation
		{
			get
			{
				return this._Estimation;
			}
			set
			{
				if ((this._Estimation != value))
				{
					this.OnEstimationChanging(value);
					this.SendPropertyChanging();
					this._Estimation = value;
					this.SendPropertyChanged("Estimation");
					this.OnEstimationChanged();
				}
			}
		}
		
		[Association(Name="Assignment_WorkHour", Storage="_WorkHours", ThisKey="IdAssignment", OtherKey="IdAssignment")]
		public EntitySet<WorkHour> WorkHours
		{
			get
			{
				return this._WorkHours;
			}
			set
			{
				this._WorkHours.Assign(value);
			}
		}
		
		[Association(Name="Task_Assignment", Storage="_Task", ThisKey="IdTask", OtherKey="IdTask", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Assignments.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Assignments.Add(this);
						this._IdTask = value.IdTask;
					}
					else
					{
						this._IdTask = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[Association(Name="User_Assignment", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Assignments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Assignments.Add(this);
						this._IdUser = value.IdUser;
					}
					else
					{
						this._IdUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkHours(WorkHour entity)
		{
			this.SendPropertyChanging();
			entity.Assignment = this;
		}
		
		private void detach_WorkHours(WorkHour entity)
		{
			this.SendPropertyChanging();
			entity.Assignment = null;
		}
	}
	
	[Table(Name="dbo.WorkHours")]
	public partial class WorkHour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IdWork;
		
		private int _IdAssignment;
		
		private int _IdUser;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _Description;
		
		private EntityRef<Assignment> _Assignment;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdWorkChanging(string value);
    partial void OnIdWorkChanged();
    partial void OnIdAssignmentChanging(int value);
    partial void OnIdAssignmentChanged();
    partial void OnIdUserChanging(int value);
    partial void OnIdUserChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public WorkHour()
		{
			this._Assignment = default(EntityRef<Assignment>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_IdWork", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IdWork
		{
			get
			{
				return this._IdWork;
			}
			set
			{
				if ((this._IdWork != value))
				{
					this.OnIdWorkChanging(value);
					this.SendPropertyChanging();
					this._IdWork = value;
					this.SendPropertyChanged("IdWork");
					this.OnIdWorkChanged();
				}
			}
		}
		
		[Column(Storage="_IdAssignment", DbType="Int NOT NULL")]
		public int IdAssignment
		{
			get
			{
				return this._IdAssignment;
			}
			set
			{
				if ((this._IdAssignment != value))
				{
					if (this._Assignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAssignmentChanging(value);
					this.SendPropertyChanging();
					this._IdAssignment = value;
					this.SendPropertyChanged("IdAssignment");
					this.OnIdAssignmentChanged();
				}
			}
		}
		
		[Column(Storage="_IdUser", DbType="Int NOT NULL")]
		public int IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Assignment_WorkHour", Storage="_Assignment", ThisKey="IdAssignment", OtherKey="IdAssignment", IsForeignKey=true)]
		public Assignment Assignment
		{
			get
			{
				return this._Assignment.Entity;
			}
			set
			{
				Assignment previousValue = this._Assignment.Entity;
				if (((previousValue != value) 
							|| (this._Assignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assignment.Entity = null;
						previousValue.WorkHours.Remove(this);
					}
					this._Assignment.Entity = value;
					if ((value != null))
					{
						value.WorkHours.Add(this);
						this._IdAssignment = value.IdAssignment;
					}
					else
					{
						this._IdAssignment = default(int);
					}
					this.SendPropertyChanged("Assignment");
				}
			}
		}
		
		[Association(Name="User_WorkHour", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WorkHours.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WorkHours.Add(this);
						this._IdUser = value.IdUser;
					}
					else
					{
						this._IdUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdProject;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdProjectChanging(int value);
    partial void OnIdProjectChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Project()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[Column(Storage="_IdProject", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdProject
		{
			get
			{
				return this._IdProject;
			}
			set
			{
				if ((this._IdProject != value))
				{
					this.OnIdProjectChanging(value);
					this.SendPropertyChanging();
					this._IdProject = value;
					this.SendPropertyChanged("IdProject");
					this.OnIdProjectChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Project_Task", Storage="_Tasks", ThisKey="IdProject", OtherKey="IdProject")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[Table(Name="dbo.Rights")]
	public partial class Right : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IdRight;
		
		private string _Name;
		
		private EntitySet<Roles_Right> _Roles_Rights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRightChanging(string value);
    partial void OnIdRightChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Right()
		{
			this._Roles_Rights = new EntitySet<Roles_Right>(new Action<Roles_Right>(this.attach_Roles_Rights), new Action<Roles_Right>(this.detach_Roles_Rights));
			OnCreated();
		}
		
		[Column(Storage="_IdRight", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IdRight
		{
			get
			{
				return this._IdRight;
			}
			set
			{
				if ((this._IdRight != value))
				{
					this.OnIdRightChanging(value);
					this.SendPropertyChanging();
					this._IdRight = value;
					this.SendPropertyChanged("IdRight");
					this.OnIdRightChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Right_Roles_Right", Storage="_Roles_Rights", ThisKey="IdRight", OtherKey="IdRight")]
		public EntitySet<Roles_Right> Roles_Rights
		{
			get
			{
				return this._Roles_Rights;
			}
			set
			{
				this._Roles_Rights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Roles_Rights(Roles_Right entity)
		{
			this.SendPropertyChanging();
			entity.Right = this;
		}
		
		private void detach_Roles_Rights(Roles_Right entity)
		{
			this.SendPropertyChanging();
			entity.Right = null;
		}
	}
	
	[Table(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRole;
		
		private string _Name;
		
		private EntitySet<Roles_Right> _Roles_Rights;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRoleChanging(int value);
    partial void OnIdRoleChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._Roles_Rights = new EntitySet<Roles_Right>(new Action<Roles_Right>(this.attach_Roles_Rights), new Action<Roles_Right>(this.detach_Roles_Rights));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[Column(Storage="_IdRole", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRole
		{
			get
			{
				return this._IdRole;
			}
			set
			{
				if ((this._IdRole != value))
				{
					this.OnIdRoleChanging(value);
					this.SendPropertyChanging();
					this._IdRole = value;
					this.SendPropertyChanged("IdRole");
					this.OnIdRoleChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Role_Roles_Right", Storage="_Roles_Rights", ThisKey="IdRole", OtherKey="IdRole")]
		public EntitySet<Roles_Right> Roles_Rights
		{
			get
			{
				return this._Roles_Rights;
			}
			set
			{
				this._Roles_Rights.Assign(value);
			}
		}
		
		[Association(Name="Role_User", Storage="_Users", ThisKey="IdRole", OtherKey="IdRole")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Roles_Rights(Roles_Right entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Roles_Rights(Roles_Right entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="dbo.Roles_Rights")]
	public partial class Roles_Right : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRole;
		
		private string _IdRight;
		
		private EntityRef<Right> _Right;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRoleChanging(int value);
    partial void OnIdRoleChanged();
    partial void OnIdRightChanging(string value);
    partial void OnIdRightChanged();
    #endregion
		
		public Roles_Right()
		{
			this._Right = default(EntityRef<Right>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Storage="_IdRole", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdRole
		{
			get
			{
				return this._IdRole;
			}
			set
			{
				if ((this._IdRole != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRoleChanging(value);
					this.SendPropertyChanging();
					this._IdRole = value;
					this.SendPropertyChanged("IdRole");
					this.OnIdRoleChanged();
				}
			}
		}
		
		[Column(Storage="_IdRight", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IdRight
		{
			get
			{
				return this._IdRight;
			}
			set
			{
				if ((this._IdRight != value))
				{
					if (this._Right.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRightChanging(value);
					this.SendPropertyChanging();
					this._IdRight = value;
					this.SendPropertyChanged("IdRight");
					this.OnIdRightChanged();
				}
			}
		}
		
		[Association(Name="Right_Roles_Right", Storage="_Right", ThisKey="IdRight", OtherKey="IdRight", IsForeignKey=true)]
		public Right Right
		{
			get
			{
				return this._Right.Entity;
			}
			set
			{
				Right previousValue = this._Right.Entity;
				if (((previousValue != value) 
							|| (this._Right.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Right.Entity = null;
						previousValue.Roles_Rights.Remove(this);
					}
					this._Right.Entity = value;
					if ((value != null))
					{
						value.Roles_Rights.Add(this);
						this._IdRight = value.IdRight;
					}
					else
					{
						this._IdRight = default(string);
					}
					this.SendPropertyChanged("Right");
				}
			}
		}
		
		[Association(Name="Role_Roles_Right", Storage="_Role", ThisKey="IdRole", OtherKey="IdRole", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Roles_Rights.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Roles_Rights.Add(this);
						this._IdRole = value.IdRole;
					}
					else
					{
						this._IdRole = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTask;
		
		private int _IdProject;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private EntitySet<Assignment> _Assignments;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTaskChanging(int value);
    partial void OnIdTaskChanged();
    partial void OnIdProjectChanging(int value);
    partial void OnIdProjectChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    #endregion
		
		public Task()
		{
			this._Assignments = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments), new Action<Assignment>(this.detach_Assignments));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[Column(Storage="_IdTask", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdTask
		{
			get
			{
				return this._IdTask;
			}
			set
			{
				if ((this._IdTask != value))
				{
					this.OnIdTaskChanging(value);
					this.SendPropertyChanging();
					this._IdTask = value;
					this.SendPropertyChanged("IdTask");
					this.OnIdTaskChanged();
				}
			}
		}
		
		[Column(Storage="_IdProject", DbType="Int NOT NULL")]
		public int IdProject
		{
			get
			{
				return this._IdProject;
			}
			set
			{
				if ((this._IdProject != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProjectChanging(value);
					this.SendPropertyChanging();
					this._IdProject = value;
					this.SendPropertyChanged("IdProject");
					this.OnIdProjectChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Association(Name="Task_Assignment", Storage="_Assignments", ThisKey="IdTask", OtherKey="IdTask")]
		public EntitySet<Assignment> Assignments
		{
			get
			{
				return this._Assignments;
			}
			set
			{
				this._Assignments.Assign(value);
			}
		}
		
		[Association(Name="Project_Task", Storage="_Project", ThisKey="IdProject", OtherKey="IdProject", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._IdProject = value.IdProject;
					}
					else
					{
						this._IdProject = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdUser;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private System.Nullable<int> _IdRole;
		
		private EntitySet<Assignment> _Assignments;
		
		private EntitySet<WorkHour> _WorkHours;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUserChanging(int value);
    partial void OnIdUserChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIdRoleChanging(System.Nullable<int> value);
    partial void OnIdRoleChanged();
    #endregion
		
		public User()
		{
			this._Assignments = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments), new Action<Assignment>(this.detach_Assignments));
			this._WorkHours = new EntitySet<WorkHour>(new Action<WorkHour>(this.attach_WorkHours), new Action<WorkHour>(this.detach_WorkHours));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Storage="_IdUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_IdRole", DbType="Int")]
		public System.Nullable<int> IdRole
		{
			get
			{
				return this._IdRole;
			}
			set
			{
				if ((this._IdRole != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRoleChanging(value);
					this.SendPropertyChanging();
					this._IdRole = value;
					this.SendPropertyChanged("IdRole");
					this.OnIdRoleChanged();
				}
			}
		}
		
		[Association(Name="User_Assignment", Storage="_Assignments", ThisKey="IdUser", OtherKey="IdUser")]
		public EntitySet<Assignment> Assignments
		{
			get
			{
				return this._Assignments;
			}
			set
			{
				this._Assignments.Assign(value);
			}
		}
		
		[Association(Name="User_WorkHour", Storage="_WorkHours", ThisKey="IdUser", OtherKey="IdUser")]
		public EntitySet<WorkHour> WorkHours
		{
			get
			{
				return this._WorkHours;
			}
			set
			{
				this._WorkHours.Assign(value);
			}
		}
		
		[Association(Name="Role_User", Storage="_Role", ThisKey="IdRole", OtherKey="IdRole", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._IdRole = value.IdRole;
					}
					else
					{
						this._IdRole = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_WorkHours(WorkHour entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_WorkHours(WorkHour entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
